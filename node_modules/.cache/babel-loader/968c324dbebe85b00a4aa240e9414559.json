{"ast":null,"code":"var eventsEmitter = {\n  listeners: {},\n  on: function on(events, handler) {\n    events.split(' ').forEach(function (event) {\n      if (!eventsEmitter.listeners[event]) eventsEmitter.listeners[event] = [];\n      eventsEmitter.listeners[event].unshift(handler);\n    });\n  },\n  off: function off(events, handler) {\n    events.split(' ').forEach(function (event) {\n      if (!eventsEmitter.listeners[event]) return;\n\n      if (typeof handler === 'undefined') {\n        eventsEmitter.listeners[event] = [];\n      } else {\n        eventsEmitter.listeners[event].forEach(function (eventHandler, index) {\n          if (eventHandler === handler) {\n            eventsEmitter.listeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n  },\n  once: function once(events, handler) {\n    if (typeof handler !== 'function') return;\n\n    function onceHandler() {\n      handler.apply(void 0, arguments);\n      eventsEmitter.off(events, onceHandler);\n    }\n\n    eventsEmitter.on(events, onceHandler);\n  },\n  emit: function emit(events) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    events.split(' ').forEach(function (event) {\n      if (eventsEmitter.listeners && eventsEmitter.listeners[event]) {\n        var handlers = [];\n        eventsEmitter.listeners[event].forEach(function (eventHandler) {\n          handlers.push(eventHandler);\n        });\n        handlers.forEach(function (eventHandler) {\n          eventHandler.apply(void 0, args);\n        });\n      }\n    });\n  }\n};\nexport default eventsEmitter;","map":null,"metadata":{},"sourceType":"module"}