{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Fab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Fab, _React$Component);\n\n  function F7Fab(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Fab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Fab).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Fab, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      var self = this;\n      self.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style,\n          morphTo = props.morphTo,\n          initialHref = props.href,\n          position = props.position,\n          text = props.text,\n          target = props.target;\n      var href = initialHref;\n      if (href === true) href = '#';\n      if (href === false) href = undefined;\n      var linkChildren = [];\n      var rootChildren = [];\n      var _self$slots = self.slots,\n          linkSlots = _self$slots.link,\n          defaultSlots = _self$slots.default,\n          rootSlots = _self$slots.root,\n          textSlots = _self$slots.text;\n\n      if (defaultSlots) {\n        for (var i = 0; i < defaultSlots.length; i += 1) {\n          var child = defaultSlots[i];\n          var isRoot = void 0;\n          {\n            var tag = child.type && (child.type.displayName || child.type.name);\n            if (tag === 'F7FabButtons' || tag === 'f7-fab-buttons') isRoot = true;\n          }\n          if (isRoot) rootChildren.push(child);else linkChildren.push(child);\n        }\n      }\n\n      var textEl;\n\n      if (text || textSlots && textSlots.length) {\n        textEl = React.createElement('div', {\n          className: 'fab-text'\n        }, text || textSlots);\n      }\n\n      var linkEl;\n\n      if (linkChildren.length || linkSlots && linkSlots.length) {\n        linkEl = React.createElement('a', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['linkEl'] = __reactNode;\n          },\n          target: target,\n          href: href,\n          key: 'f7-fab-link'\n        }, linkChildren, textEl, linkSlots);\n      }\n\n      var classes = Utils.classNames(className, 'fab', \"fab-\".concat(position), {\n        'fab-morph': morphTo,\n        'fab-extended': typeof textEl !== 'undefined'\n      }, Mixins.colorClasses(props));\n      return React.createElement('div', {\n        id: id,\n        style: style,\n        className: classes,\n        'data-morph-to': morphTo\n      }, linkEl, rootChildren, rootSlots);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n\n      if (self.refs.linkEl) {\n        self.refs.linkEl.removeEventListener('click', self.onClick);\n      }\n\n      if (self.f7Tooltip && self.f7Tooltip.destroy) {\n        self.f7Tooltip.destroy();\n        self.f7Tooltip = null;\n        delete self.f7Tooltip;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n\n      if (self.refs.linkEl) {\n        self.refs.linkEl.addEventListener('click', self.onClick);\n      }\n\n      var tooltip = self.props.tooltip;\n      if (!tooltip) return;\n      self.$f7ready(function (f7) {\n        self.f7Tooltip = f7.tooltip.create({\n          targetEl: self.refs.el,\n          text: tooltip\n        });\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.tooltip', prevProps, prevState, function (newText) {\n        var self = _this3;\n        if (!newText || !self.f7Tooltip) return;\n        self.f7Tooltip.setText(newText);\n      });\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Fab;\n}(React.Component);\n\n__reactComponentSetProps(F7Fab, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  morphTo: String,\n  href: [Boolean, String],\n  target: String,\n  text: String,\n  position: {\n    type: String,\n    default: 'right-bottom'\n  },\n  tooltip: String\n}, Mixins.colorProps));\n\nF7Fab.displayName = 'f7-fab';\nexport default F7Fab;","map":null,"metadata":{},"sourceType":"module"}