{"ast":null,"code":"'use strict';\n\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.object.set-prototype-of\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.object.assign\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { withConfig, ConfigProvider } from './context';\nimport { getRandomColor, parseSize } from './utils';\nimport InternalState from './internal-state';\nimport gravatarSource from './sources/Gravatar';\nimport facebookSource from './sources/Facebook';\nimport vkontakteSource from './sources/Vkontakte';\nimport twitterSource from './sources/Twitter';\nimport googleSource from './sources/Google';\nimport skypeSource from './sources/Skype';\nimport valueSource from './sources/Value';\nimport srcSource from './sources/Src';\nimport iconSource from './sources/Icon';\nimport redirectSource from './sources/AvatarRedirect';\nvar SOURCES = [facebookSource, googleSource, twitterSource, redirectSource('twitter', 'twitterHandle'), redirectSource('instagram', 'instagramId'), vkontakteSource, skypeSource, gravatarSource, srcSource, valueSource, iconSource]; // Collect propTypes for each individual source\n\nvar sourcePropTypes = SOURCES.reduce(function (r, s) {\n  return Object.assign(r, s.propTypes);\n}, {});\nexport { getRandomColor } from './utils';\nexport { ConfigProvider } from './context';\n\nfunction matchSource(Source, props, cb) {\n  var cache = props.cache;\n  var instance = new Source(props);\n  if (!instance.isCompatible(props)) return cb();\n  instance.get(function (state) {\n    var failedBefore = state && state.hasOwnProperty('src') && cache.hasSourceFailedBefore(state.src);\n\n    if (!failedBefore && state) {\n      cb(state);\n    } else {\n      cb();\n    }\n  });\n}\n\nexport var Avatar =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Avatar, _PureComponent);\n\n  function Avatar(props) {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Avatar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_createFetcher\", function (internal) {\n      return function (errEvent) {\n        var cache = _this.props.cache;\n        if (!internal.isActive(_this.state)) return; // Mark img source as failed for future reference\n\n        if (errEvent && errEvent.type === 'error') cache.sourceFailed(errEvent.target.src);\n        var pointer = internal.sourcePointer;\n        if (SOURCES.length === pointer) return;\n        var source = SOURCES[pointer];\n        internal.sourcePointer++;\n        matchSource(source, _this.props, function (nextState) {\n          if (!nextState) return setTimeout(internal.fetch, 0);\n          if (!internal.isActive(_this.state)) return; // Reset other values to prevent them from sticking (#51)\n\n          nextState = _objectSpread({\n            src: null,\n            value: null,\n            color: null\n          }, nextState);\n\n          _this.setState(function (state) {\n            // Internal state has been reset => we received new props\n            return internal.isActive(state) ? nextState : {};\n          });\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"fetch\", function () {\n      var internal = new InternalState();\n      internal.fetch = _this._createFetcher(internal);\n\n      _this.setState({\n        internal: internal\n      }, internal.fetch);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"_scaleTextNode\", function (node) {\n      var _this$props = _this.props,\n          unstyled = _this$props.unstyled,\n          textSizeRatio = _this$props.textSizeRatio;\n      if (!node || unstyled) return;\n      var parent = node.parentNode; // Reset font-size such that scaling works correctly (#133)\n\n      parent.style.fontSize = null;\n      var textWidth = node.getBoundingClientRect().width;\n      if (textWidth < 0) return;\n      var containerWidth = parent.getBoundingClientRect().width;\n      var ratio = containerWidth / textWidth; // Set font-size on parent span, otherwise the `table-cell` span\n      // will cause alignment issues.\n\n      parent.style.fontSize = \"calc((100% * \".concat(ratio, \") / \").concat(textSizeRatio, \")\");\n    });\n\n    _this.state = {\n      internal: null,\n      src: null,\n      value: null,\n      color: props.color\n    };\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetch();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(newProps) {\n      var needsUpdate = false; // This seems redundant\n      //\n      // Props that need to be in `state` are\n      // `value`, `src` and `color`\n\n      for (var prop in sourcePropTypes) {\n        needsUpdate = needsUpdate || newProps[prop] !== this.props[prop];\n      }\n\n      if (needsUpdate) setTimeout(this.fetch, 0);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.internal) {\n        this.state.internal.active = false;\n      }\n    }\n  }, {\n    key: \"_renderAsImage\",\n    value: function _renderAsImage() {\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          round = _this$props2.round,\n          unstyled = _this$props2.unstyled,\n          name = _this$props2.name,\n          value = _this$props2.value;\n      var internal = this.state.internal;\n      var size = parseSize(this.props.size);\n      var alt = name || value;\n      var imageStyle = unstyled ? null : {\n        maxWidth: '100%',\n        width: size.str,\n        height: size.str,\n        borderRadius: round === true ? '100%' : round\n      };\n      return React.createElement(\"img\", {\n        className: className + ' sb-avatar__image',\n        width: size.str,\n        height: size.str,\n        style: imageStyle,\n        src: this.state.src,\n        alt: alt,\n        onError: internal && internal.fetch\n      });\n    }\n  }, {\n    key: \"_renderAsText\",\n    value: function _renderAsText() {\n      var _this$props3 = this.props,\n          className = _this$props3.className,\n          round = _this$props3.round,\n          unstyled = _this$props3.unstyled;\n      var size = parseSize(this.props.size);\n      var initialsStyle = unstyled ? null : {\n        width: size.str,\n        height: size.str,\n        lineHeight: 'initial',\n        textAlign: 'center',\n        textTransform: 'uppercase',\n        color: this.props.fgColor,\n        background: this.state.color,\n        borderRadius: round === true ? '100%' : round\n      };\n      var tableStyle = unstyled ? null : {\n        display: 'table',\n        width: '100%',\n        height: '100%'\n      };\n      var spanStyle = unstyled ? null : {\n        display: 'table-cell',\n        verticalAlign: 'middle'\n      };\n      return React.createElement(\"div\", {\n        className: className + ' sb-avatar__text',\n        style: initialsStyle\n      }, React.createElement(\"div\", {\n        style: tableStyle\n      }, React.createElement(\"span\", {\n        style: spanStyle\n      }, React.createElement(\"span\", {\n        ref: this._scaleTextNode,\n        key: this.state.value\n      }, this.state.value))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          unstyled = _this$props4.unstyled,\n          round = _this$props4.round,\n          style = _this$props4.style,\n          onClick = _this$props4.onClick;\n      var _this$state = this.state,\n          src = _this$state.src,\n          sourceName = _this$state.sourceName;\n      var size = parseSize(this.props.size);\n      var hostStyle = unstyled ? null : _objectSpread({\n        display: 'inline-block',\n        verticalAlign: 'middle',\n        width: size.str,\n        height: size.str,\n        borderRadius: round === true ? '100%' : round,\n        fontFamily: 'Helvetica, Arial, sans-serif'\n      }, style);\n      var classNames = [className, 'sb-avatar'];\n\n      if (sourceName) {\n        var source = sourceName.toLowerCase().replace(/[^a-z0-9-]+/g, '-') // only allow alphanumeric\n        .replace(/^-+|-+$/g, ''); // trim `-`\n\n        classNames.push('sb-avatar--' + source);\n      }\n\n      return React.createElement(\"div\", {\n        className: classNames.join(' '),\n        onClick: onClick,\n        style: hostStyle\n      }, src ? this._renderAsImage() : this._renderAsText());\n    }\n  }]);\n\n  return Avatar;\n}(PureComponent);\n\n_defineProperty(Avatar, \"displayName\", 'Avatar');\n\n_defineProperty(Avatar, \"propTypes\", _objectSpread({}, sourcePropTypes, {\n  className: PropTypes.string,\n  fgColor: PropTypes.string,\n  color: PropTypes.string,\n  colors: PropTypes.arrayOf(PropTypes.string),\n  round: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  style: PropTypes.object,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  textSizeRatio: PropTypes.number,\n  unstyled: PropTypes.bool,\n  cache: PropTypes.object,\n  onClick: PropTypes.func\n}));\n\n_defineProperty(Avatar, \"defaultProps\", {\n  className: '',\n  fgColor: '#FFF',\n  round: false,\n  size: 100,\n  textSizeRatio: 3,\n  unstyled: false\n});\n\n_defineProperty(Avatar, \"getRandomColor\", getRandomColor);\n\n_defineProperty(Avatar, \"ConfigProvider\", ConfigProvider);\n\nexport default Object.assign(withConfig(Avatar), {\n  getRandomColor: getRandomColor,\n  ConfigProvider: ConfigProvider\n});","map":null,"metadata":{},"sourceType":"module"}