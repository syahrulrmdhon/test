{"ast":null,"code":"export var CACHE_PREFIX = 'react-avatar/';\nexport var CACHE_KEY_FAILING = 'failing';\n\nvar _hasLocalStorage = function isLocalStorageAvailable() {\n  try {\n    return 'localStorage' in window && window['localStorage'];\n  } catch (err) {\n    return false;\n  }\n}();\n\nexport default {\n  set: function set(key, value) {\n    // cache not available\n    if (!_hasLocalStorage) return;\n    value = JSON.stringify(value);\n\n    try {\n      localStorage.setItem(CACHE_PREFIX + key, value);\n    } catch (e) {\n      // failsafe for mobile Safari private mode\n      console.error(e); // eslint-disable-line no-console\n    }\n  },\n  get: function get(key) {\n    var value = localStorage.getItem(CACHE_PREFIX + key);\n    if (value) return JSON.parse(value);\n    return null;\n  },\n  sourceFailed: function sourceFailed(source) {\n    var cacheList = this.get(CACHE_KEY_FAILING) || []; // already in cache\n\n    if (cacheList.indexOf(source) > -1) return;\n    cacheList.push(source); // only keep the last 20 results so we don't fill up local storage\n\n    cacheList = cacheList.slice(-20);\n    return this.set(CACHE_KEY_FAILING, cacheList);\n  },\n  hasSourceFailedBefore: function hasSourceFailedBefore(source) {\n    var cacheList = this.get(CACHE_KEY_FAILING) || [];\n    return cacheList.indexOf(source) > -1;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}