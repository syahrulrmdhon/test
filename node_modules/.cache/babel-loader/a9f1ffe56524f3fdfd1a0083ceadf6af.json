{"ast":null,"code":"import _defineProperty from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport Utils from './utils';\nvar Mixins = {\n  colorProps: {\n    color: String,\n    colorTheme: String,\n    textColor: String,\n    bgColor: String,\n    borderColor: String,\n    rippleColor: String,\n    themeDark: Boolean\n  },\n  colorClasses: function colorClasses(props) {\n    var _ref;\n\n    var color = props.color,\n        colorTheme = props.colorTheme,\n        textColor = props.textColor,\n        bgColor = props.bgColor,\n        borderColor = props.borderColor,\n        rippleColor = props.rippleColor,\n        themeDark = props.themeDark;\n    return _ref = {\n      'theme-dark': themeDark\n    }, _defineProperty(_ref, \"color-\".concat(color), color), _defineProperty(_ref, \"color-theme-\".concat(colorTheme), colorTheme), _defineProperty(_ref, \"text-color-\".concat(textColor), textColor), _defineProperty(_ref, \"bg-color-\".concat(bgColor), bgColor), _defineProperty(_ref, \"border-color-\".concat(borderColor), borderColor), _defineProperty(_ref, \"ripple-color-\".concat(rippleColor), rippleColor), _ref;\n  },\n  linkIconProps: {\n    icon: String,\n    iconMaterial: String,\n    iconIon: String,\n    iconFa: String,\n    iconF7: String,\n    iconIfMd: String,\n    iconIfIos: String,\n    iconIos: String,\n    iconMd: String,\n    iconColor: String,\n    iconSize: [String, Number]\n  },\n  linkRouterProps: {\n    back: Boolean,\n    external: Boolean,\n    force: Boolean,\n    animate: {\n      type: Boolean,\n      default: undefined\n    },\n    ignoreCache: Boolean,\n    reloadCurrent: Boolean,\n    reloadAll: Boolean,\n    reloadPrevious: Boolean,\n    routeTabId: String,\n    view: String\n  },\n  linkRouterAttrs: function linkRouterAttrs(props) {\n    var force = props.force,\n        reloadCurrent = props.reloadCurrent,\n        reloadPrevious = props.reloadPrevious,\n        reloadAll = props.reloadAll,\n        animate = props.animate,\n        ignoreCache = props.ignoreCache,\n        routeTabId = props.routeTabId,\n        view = props.view;\n    var dataAnimate;\n\n    if ('animate' in props && typeof animate !== 'undefined') {\n      dataAnimate = animate.toString();\n    }\n\n    return {\n      'data-force': force || undefined,\n      'data-reload-current': reloadCurrent || undefined,\n      'data-reload-all': reloadAll || undefined,\n      'data-reload-previous': reloadPrevious || undefined,\n      'data-animate': dataAnimate,\n      'data-ignore-cache': ignoreCache || undefined,\n      'data-route-tab-id': routeTabId || undefined,\n      'data-view': Utils.isStringProp(view) ? view : undefined\n    };\n  },\n  linkRouterClasses: function linkRouterClasses(props) {\n    var back = props.back,\n        linkBack = props.linkBack,\n        external = props.external;\n    return {\n      back: back || linkBack,\n      external: external\n    };\n  },\n  linkActionsProps: {\n    searchbarEnable: [Boolean, String],\n    searchbarDisable: [Boolean, String],\n    searchbarClear: [Boolean, String],\n    searchbarToggle: [Boolean, String],\n    // Panel\n    panelOpen: [Boolean, String],\n    panelClose: [Boolean, String],\n    // Popup\n    popupOpen: [Boolean, String],\n    popupClose: [Boolean, String],\n    // Actions\n    actionsOpen: [Boolean, String],\n    actionsClose: [Boolean, String],\n    // Popover\n    popoverOpen: [Boolean, String],\n    popoverClose: [Boolean, String],\n    // Login Screen\n    loginScreenOpen: [Boolean, String],\n    loginScreenClose: [Boolean, String],\n    // Picker\n    sheetOpen: [Boolean, String],\n    sheetClose: [Boolean, String],\n    // Sortable\n    sortableEnable: [Boolean, String],\n    sortableDisable: [Boolean, String],\n    sortableToggle: [Boolean, String]\n  },\n  linkActionsAttrs: function linkActionsAttrs(props) {\n    var searchbarEnable = props.searchbarEnable,\n        searchbarDisable = props.searchbarDisable,\n        searchbarClear = props.searchbarClear,\n        searchbarToggle = props.searchbarToggle,\n        panelOpen = props.panelOpen,\n        panelClose = props.panelClose,\n        popupOpen = props.popupOpen,\n        popupClose = props.popupClose,\n        actionsOpen = props.actionsOpen,\n        actionsClose = props.actionsClose,\n        popoverOpen = props.popoverOpen,\n        popoverClose = props.popoverClose,\n        loginScreenOpen = props.loginScreenOpen,\n        loginScreenClose = props.loginScreenClose,\n        sheetOpen = props.sheetOpen,\n        sheetClose = props.sheetClose,\n        sortableEnable = props.sortableEnable,\n        sortableDisable = props.sortableDisable,\n        sortableToggle = props.sortableToggle;\n    return {\n      'data-searchbar': Utils.isStringProp(searchbarEnable) && searchbarEnable || Utils.isStringProp(searchbarDisable) && searchbarDisable || Utils.isStringProp(searchbarClear) && searchbarClear || Utils.isStringProp(searchbarToggle) && searchbarToggle || undefined,\n      'data-panel': Utils.isStringProp(panelOpen) && panelOpen || Utils.isStringProp(panelClose) && panelClose || undefined,\n      'data-popup': Utils.isStringProp(popupOpen) && popupOpen || Utils.isStringProp(popupClose) && popupClose || undefined,\n      'data-actions': Utils.isStringProp(actionsOpen) && actionsOpen || Utils.isStringProp(actionsClose) && actionsClose || undefined,\n      'data-popover': Utils.isStringProp(popoverOpen) && popoverOpen || Utils.isStringProp(popoverClose) && popoverClose || undefined,\n      'data-sheet': Utils.isStringProp(sheetOpen) && sheetOpen || Utils.isStringProp(sheetClose) && sheetClose || undefined,\n      'data-login-screen': Utils.isStringProp(loginScreenOpen) && loginScreenOpen || Utils.isStringProp(loginScreenClose) && loginScreenClose || undefined,\n      'data-sortable': Utils.isStringProp(sortableEnable) && sortableEnable || Utils.isStringProp(sortableDisable) && sortableDisable || Utils.isStringProp(sortableToggle) && sortableToggle || undefined\n    };\n  },\n  linkActionsClasses: function linkActionsClasses(props) {\n    var searchbarEnable = props.searchbarEnable,\n        searchbarDisable = props.searchbarDisable,\n        searchbarClear = props.searchbarClear,\n        searchbarToggle = props.searchbarToggle,\n        panelOpen = props.panelOpen,\n        panelClose = props.panelClose,\n        popupOpen = props.popupOpen,\n        popupClose = props.popupClose,\n        actionsClose = props.actionsClose,\n        actionsOpen = props.actionsOpen,\n        popoverOpen = props.popoverOpen,\n        popoverClose = props.popoverClose,\n        loginScreenOpen = props.loginScreenOpen,\n        loginScreenClose = props.loginScreenClose,\n        sheetOpen = props.sheetOpen,\n        sheetClose = props.sheetClose,\n        sortableEnable = props.sortableEnable,\n        sortableDisable = props.sortableDisable,\n        sortableToggle = props.sortableToggle;\n    return {\n      'searchbar-enable': searchbarEnable || searchbarEnable === '',\n      'searchbar-disable': searchbarDisable || searchbarDisable === '',\n      'searchbar-clear': searchbarClear || searchbarClear === '',\n      'searchbar-toggle': searchbarToggle || searchbarToggle === '',\n      'panel-close': Utils.isTrueProp(panelClose) || panelClose,\n      'panel-open': panelOpen || panelOpen === '',\n      'popup-close': Utils.isTrueProp(popupClose) || popupClose,\n      'popup-open': popupOpen || popupOpen === '',\n      'actions-close': Utils.isTrueProp(actionsClose) || actionsClose,\n      'actions-open': actionsOpen || actionsOpen === '',\n      'popover-close': Utils.isTrueProp(popoverClose) || popoverClose,\n      'popover-open': popoverOpen || popoverOpen === '',\n      'sheet-close': Utils.isTrueProp(sheetClose) || sheetClose,\n      'sheet-open': sheetOpen || sheetOpen === '',\n      'login-screen-close': Utils.isTrueProp(loginScreenClose) || loginScreenClose,\n      'login-screen-open': loginScreenOpen || loginScreenOpen === '',\n      'sortable-enable': Utils.isTrueProp(sortableEnable) || sortableEnable,\n      'sortable-disable': Utils.isTrueProp(sortableDisable) || sortableDisable,\n      'sortable-toggle': sortableToggle === true || typeof sortableToggle === 'string' && sortableToggle.length\n    };\n  }\n};\nexport default Mixins;","map":null,"metadata":{},"sourceType":"module"}