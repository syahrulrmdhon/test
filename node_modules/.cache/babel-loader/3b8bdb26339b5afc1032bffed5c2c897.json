{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Icon =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Icon, _React$Component);\n\n  function F7Icon(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Icon);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Icon).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7Icon, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          style = props.style;\n      return React.createElement('i', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: Utils.extend({\n          fontSize: self.sizeComputed\n        }, style),\n        className: self.classes\n      }, self.iconTextComputed, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n\n      if (self.f7Tooltip && self.f7Tooltip.destroy) {\n        self.f7Tooltip.destroy();\n        self.f7Tooltip = null;\n        delete self.f7Tooltip;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      var tooltip = self.props.tooltip;\n      if (!tooltip) return;\n      self.$f7ready(function (f7) {\n        self.f7Tooltip = f7.tooltip.create({\n          targetEl: el,\n          text: tooltip\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.tooltip', prevProps, prevState, function (newText) {\n        var self = _this3;\n        if (!newText || !self.f7Tooltip) return;\n        self.f7Tooltip.setText(newText);\n      });\n    }\n  }, {\n    key: \"sizeComputed\",\n    get: function get() {\n      var self = this;\n      var size = self.props.size;\n\n      if (typeof size === 'number' || parseFloat(size) === size * 1) {\n        size = \"\".concat(size, \"px\");\n      }\n\n      return size;\n    }\n  }, {\n    key: \"iconTextComputed\",\n    get: function get() {\n      var self = this;\n      var _self$props = self.props,\n          material = _self$props.material,\n          f7 = _self$props.f7,\n          ifMd = _self$props.ifMd,\n          ifIos = _self$props.ifIos,\n          md = _self$props.md,\n          ios = _self$props.ios;\n      var text = material || f7;\n      var mdIcon = ifMd || md;\n      var iosIcon = ifIos || ios;\n\n      if (mdIcon && self.$theme.md && (mdIcon.indexOf('material:') >= 0 || mdIcon.indexOf('f7:') >= 0)) {\n        text = mdIcon.split(':')[1];\n      } else if (iosIcon && self.$theme.ios && (iosIcon.indexOf('material:') >= 0 || iosIcon.indexOf('f7:') >= 0)) {\n        text = iosIcon.split(':')[1];\n      }\n\n      return text;\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var classes = {\n        icon: true\n      };\n      var self = this;\n      var props = self.props;\n      var ifMd = props.ifMd,\n          ifIos = props.ifIos,\n          material = props.material,\n          f7 = props.f7,\n          fa = props.fa,\n          ion = props.ion,\n          icon = props.icon,\n          md = props.md,\n          ios = props.ios,\n          className = props.className;\n      var mdIcon = ifMd || md;\n      var iosIcon = ifIos || ios;\n\n      if (mdIcon || iosIcon) {\n        var parts = (self.$theme.md ? mdIcon : iosIcon).split(':');\n        var prop = parts[0];\n        var value = parts[1];\n\n        if (prop === 'material' || prop === 'fa' || prop === 'f7') {\n          classes.fa = prop === 'fa';\n          classes['material-icons'] = prop === 'material';\n          classes['f7-icons'] = prop === 'f7';\n        }\n\n        if (prop === 'fa' || prop === 'ion') {\n          classes[\"\".concat(prop, \"-\").concat(value)] = true;\n        }\n\n        if (prop === 'icon') {\n          classes[value] = true;\n        }\n      } else {\n        classes = {\n          icon: true,\n          'material-icons': material,\n          'f7-icons': f7,\n          fa: fa\n        };\n        if (ion) classes[\"ion-\".concat(ion)] = true;\n        if (fa) classes[\"fa-\".concat(fa)] = true;\n        if (icon) classes[icon] = true;\n      }\n\n      return Utils.classNames(className, classes, Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Icon;\n}(React.Component);\n\n__reactComponentSetProps(F7Icon, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  material: String,\n  f7: String,\n  ion: String,\n  fa: String,\n  icon: String,\n  ifMd: String,\n  ifIos: String,\n  ios: String,\n  md: String,\n  tooltip: String,\n  size: [String, Number]\n}, Mixins.colorProps));\n\nF7Icon.displayName = 'f7-icon';\nexport default F7Icon;","map":null,"metadata":{},"sourceType":"module"}