{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Mixins from '../utils/mixins';\nimport Utils from '../utils/utils';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Popup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Popup, _React$Component);\n\n  function F7Popup(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Popup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Popup).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7Popup, [{\n    key: \"onOpen\",\n    value: function onOpen(event) {\n      this.dispatchEvent('popup:open popupOpen', event);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(event) {\n      this.dispatchEvent('popup:opened popupOpened', event);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(event) {\n      this.dispatchEvent('popup:close popupClose', event);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(event) {\n      this.dispatchEvent('popup:closed popupClosed', event);\n    }\n  }, {\n    key: \"open\",\n    value: function open(animate) {\n      var self = this;\n      if (!self.$f7) return undefined;\n      return self.$f7.popup.open(self.refs.el, animate);\n    }\n  }, {\n    key: \"close\",\n    value: function close(animate) {\n      var self = this;\n      if (!self.$f7) return undefined;\n      return self.$f7.popup.close(self.refs.el, animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style,\n          tabletFullscreen = props.tabletFullscreen;\n      var classes = Utils.classNames(className, 'popup', {\n        'popup-tablet-fullscreen': tabletFullscreen\n      }, Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      if (self.f7Popup) self.f7Popup.destroy();\n      var el = self.refs.el;\n      if (!el) return;\n      el.removeEventListener('popup:open', self.onOpenBound);\n      el.removeEventListener('popup:opened', self.onOpenedBound);\n      el.removeEventListener('popup:close', self.onCloseBound);\n      el.removeEventListener('popup:closed', self.onClosedBound);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      self.onOpenBound = self.onOpen.bind(self);\n      self.onOpenedBound = self.onOpened.bind(self);\n      self.onCloseBound = self.onClose.bind(self);\n      self.onClosedBound = self.onClosed.bind(self);\n      el.addEventListener('popup:open', self.onOpenBound);\n      el.addEventListener('popup:opened', self.onOpenedBound);\n      el.addEventListener('popup:close', self.onCloseBound);\n      el.addEventListener('popup:closed', self.onClosedBound);\n      var props = self.props;\n      var closeByBackdropClick = props.closeByBackdropClick,\n          backdrop = props.backdrop,\n          animate = props.animate;\n      var popupParams = {\n        el: el\n      };\n      {\n        if ('closeByBackdropClick' in props) popupParams.closeByBackdropClick = closeByBackdropClick;\n        if ('animate' in props) popupParams.animate = animate;\n        if ('backdrop' in props) popupParams.backdrop = backdrop;\n      }\n      self.$f7ready(function () {\n        self.f7Popup = self.$f7.popup.create(popupParams);\n\n        if (self.props.opened) {\n          self.f7Popup.open(false);\n        }\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.opened', prevProps, prevState, function (opened) {\n        var self = _this3;\n        if (!self.f7Popup) return;\n\n        if (opened) {\n          self.f7Popup.open();\n        } else {\n          self.f7Popup.close();\n        }\n      });\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Popup;\n}(React.Component);\n\n__reactComponentSetProps(F7Popup, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  tabletFullscreen: Boolean,\n  opened: Boolean,\n  closeByBackdropClick: Boolean,\n  backdrop: Boolean,\n  animate: Boolean\n}, Mixins.colorProps));\n\nF7Popup.displayName = 'f7-popup';\nexport default F7Popup;","map":null,"metadata":{},"sourceType":"module"}