{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7PageContent from './page-content';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Page =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Page, _React$Component);\n\n  function F7Page(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Page);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Page).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        hasSubnavbar: false,\n        routerClass: '',\n        routerForceUnstack: false\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(F7Page, [{\n    key: \"onPtrPullStart\",\n    value: function onPtrPullStart(event) {\n      this.dispatchEvent('ptr:pullstart ptrPullStart', event);\n    }\n  }, {\n    key: \"onPtrPullMove\",\n    value: function onPtrPullMove(event) {\n      this.dispatchEvent('ptr:pullmove ptrPullMove', event);\n    }\n  }, {\n    key: \"onPtrPullEnd\",\n    value: function onPtrPullEnd(event) {\n      this.dispatchEvent('ptr:pullend ptrPullEnd', event);\n    }\n  }, {\n    key: \"onPtrRefresh\",\n    value: function onPtrRefresh(event) {\n      var done = event.detail;\n      this.dispatchEvent('ptr:refresh ptrRefresh', event, done);\n    }\n  }, {\n    key: \"onPtrDone\",\n    value: function onPtrDone(event) {\n      this.dispatchEvent('ptr:done ptrDone', event);\n    }\n  }, {\n    key: \"onInfinite\",\n    value: function onInfinite(event) {\n      this.dispatchEvent('infinite', event);\n    }\n  }, {\n    key: \"onPageMounted\",\n    value: function onPageMounted(event) {\n      var page = event.detail;\n      this.dispatchEvent('page:mounted pageMounted', event, page);\n    }\n  }, {\n    key: \"onPageStack\",\n    value: function onPageStack() {\n      this.setState({\n        routerForceUnstack: false\n      });\n    }\n  }, {\n    key: \"onPageUnstack\",\n    value: function onPageUnstack() {\n      this.setState({\n        routerForceUnstack: true\n      });\n    }\n  }, {\n    key: \"onPagePosition\",\n    value: function onPagePosition(event) {\n      var position = event.detail.position;\n      this.setState({\n        routerClass: \"page-\".concat(position)\n      });\n    }\n  }, {\n    key: \"onPageInit\",\n    value: function onPageInit(event) {\n      var page = event.detail;\n      var _this$props = this.props,\n          withSubnavbar = _this$props.withSubnavbar,\n          subnavbar = _this$props.subnavbar;\n\n      if (typeof withSubnavbar === 'undefined' && typeof subnavbar === 'undefined') {\n        if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find('.subnavbar').length || page.$el.children('.navbar').find('.subnavbar').length) {\n          this.setState({\n            hasSubnavbar: true\n          });\n        }\n      }\n\n      this.dispatchEvent('page:init pageInit', event, page);\n    }\n  }, {\n    key: \"onPageReinit\",\n    value: function onPageReinit(event) {\n      var page = event.detail;\n      this.dispatchEvent('page:reinit pageReinit', event, page);\n    }\n  }, {\n    key: \"onPageBeforeIn\",\n    value: function onPageBeforeIn(event) {\n      var page = event.detail;\n\n      if (page.from === 'next') {\n        this.setState({\n          routerClass: 'page-next'\n        });\n      }\n\n      if (page.from === 'previous') {\n        this.setState({\n          routerClass: 'page-previous'\n        });\n      }\n\n      this.dispatchEvent('page:beforein pageBeforeIn', event, page);\n    }\n  }, {\n    key: \"onPageBeforeOut\",\n    value: function onPageBeforeOut(event) {\n      var page = event.detail;\n      this.dispatchEvent('page:beforeout pageBeforeOut', event, page);\n    }\n  }, {\n    key: \"onPageAfterOut\",\n    value: function onPageAfterOut(event) {\n      var page = event.detail;\n\n      if (page.to === 'next') {\n        this.setState({\n          routerClass: 'page-next'\n        });\n      }\n\n      if (page.to === 'previous') {\n        this.setState({\n          routerClass: 'page-previous'\n        });\n      }\n\n      this.dispatchEvent('page:afterout pageAfterOut', event, page);\n    }\n  }, {\n    key: \"onPageAfterIn\",\n    value: function onPageAfterIn(event) {\n      var page = event.detail;\n      this.setState({\n        routerClass: 'page-current'\n      });\n      this.dispatchEvent('page:afterin pageAfterIn', event, page);\n    }\n  }, {\n    key: \"onPageBeforeRemove\",\n    value: function onPageBeforeRemove(event) {\n      var page = event.detail;\n      this.dispatchEvent('page:beforeremove pageBeforeRemove', event, page);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          name = props.name,\n          pageContent = props.pageContent,\n          messagesContent = props.messagesContent,\n          ptr = props.ptr,\n          ptrDistance = props.ptrDistance,\n          ptrPreloader = props.ptrPreloader,\n          infinite = props.infinite,\n          infiniteDistance = props.infiniteDistance,\n          infinitePreloader = props.infinitePreloader,\n          infiniteTop = props.infiniteTop,\n          hideBarsOnScroll = props.hideBarsOnScroll,\n          hideNavbarOnScroll = props.hideNavbarOnScroll,\n          hideToolbarOnScroll = props.hideToolbarOnScroll,\n          loginScreen = props.loginScreen,\n          className = props.className,\n          stacked = props.stacked,\n          tabs = props.tabs,\n          subnavbar = props.subnavbar,\n          withSubnavbar = props.withSubnavbar,\n          noNavbar = props.noNavbar,\n          noToolbar = props.noToolbar,\n          noSwipeback = props.noSwipeback;\n      var fixedList = [];\n      var staticList = [];\n      var needsPageContent = pageContent;\n      var _self$slots = self.slots,\n          slotsStatic = _self$slots.static,\n          slotsFixed = _self$slots.fixed,\n          slotsDefault = _self$slots.default;\n      var fixedTags;\n      fixedTags = 'navbar toolbar tabbar subnavbar searchbar messagebar fab list-index'.split(' ').map(function (tagName) {\n        return \"f7-\".concat(tagName);\n      });\n      var hasSubnavbar;\n      var hasMessages;\n      hasMessages = messagesContent;\n\n      if (slotsDefault) {\n        slotsDefault.forEach(function (child) {\n          if (typeof child === 'undefined') return;\n          var isFixedTag = false;\n          {\n            var tag = child.type && (child.type.displayName || child.type.name);\n\n            if (!tag) {\n              if (needsPageContent) staticList.push(child);\n              return;\n            }\n\n            if (tag === 'F7Subnavbar' || tag === 'f7-subnavbar') hasSubnavbar = true;\n            if (typeof hasMessages === 'undefined' && (tag === 'F7Messages' || tag === 'f7-messages')) hasMessages = true;\n\n            if (fixedTags.indexOf(tag) >= 0) {\n              isFixedTag = true;\n            }\n          }\n\n          if (needsPageContent) {\n            if (isFixedTag) fixedList.push(child);else staticList.push(child);\n          }\n        });\n      }\n\n      var forceSubnavbar = typeof subnavbar === 'undefined' && typeof withSubnavbar === 'undefined' ? hasSubnavbar || this.state.hasSubnavbar : false;\n      var classes = Utils.classNames(className, 'page', this.state.routerClass, {\n        stacked: stacked && !this.state.routerForceUnstack,\n        tabs: tabs,\n        'page-with-subnavbar': subnavbar || withSubnavbar || forceSubnavbar,\n        'no-navbar': noNavbar,\n        'no-toolbar': noToolbar,\n        'no-swipeback': noSwipeback\n      }, Mixins.colorClasses(props));\n\n      if (!needsPageContent) {\n        return React.createElement('div', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['el'] = __reactNode;\n          },\n          id: id,\n          style: style,\n          className: classes,\n          'data-name': name\n        }, slotsFixed, slotsStatic, slotsDefault);\n      }\n\n      var pageContentEl = React.createElement(F7PageContent, {\n        ptr: ptr,\n        ptrDistance: ptrDistance,\n        ptrPreloader: ptrPreloader,\n        infinite: infinite,\n        infiniteTop: infiniteTop,\n        infiniteDistance: infiniteDistance,\n        infinitePreloader: infinitePreloader,\n        hideBarsOnScroll: hideBarsOnScroll,\n        hideNavbarOnScroll: hideNavbarOnScroll,\n        hideToolbarOnScroll: hideToolbarOnScroll,\n        messagesContent: messagesContent || hasMessages,\n        loginScreen: loginScreen\n      }, slotsStatic, staticList);\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes,\n        'data-name': name\n      }, fixedList, slotsFixed, pageContentEl);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      el.removeEventListener('ptr:pullstart', self.onPtrPullStart);\n      el.removeEventListener('ptr:pullmove', self.onPtrPullMove);\n      el.removeEventListener('ptr:pullend', self.onPtrPullEnd);\n      el.removeEventListener('ptr:refresh', self.onPtrRefresh);\n      el.removeEventListener('ptr:done', self.onPtrDone);\n      el.removeEventListener('infinite', self.onInfinite);\n      el.removeEventListener('page:mounted', self.onPageMounted);\n      el.removeEventListener('page:init', self.onPageInit);\n      el.removeEventListener('page:reinit', self.onPageReinit);\n      el.removeEventListener('page:beforein', self.onPageBeforeIn);\n      el.removeEventListener('page:beforeout', self.onPageBeforeOut);\n      el.removeEventListener('page:afterout', self.onPageAfterOut);\n      el.removeEventListener('page:afterin', self.onPageAfterIn);\n      el.removeEventListener('page:beforeremove', self.onPageBeforeRemove);\n      el.removeEventListener('page:stack', self.onPageStack);\n      el.removeEventListener('page:unstack', self.onPageUnstack);\n      el.removeEventListener('page:position', self.onPagePosition);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      var _self$props = self.props,\n          ptr = _self$props.ptr,\n          infinite = _self$props.infinite;\n      self.onPtrPullStart = self.onPtrPullStart.bind(self);\n      self.onPtrPullMove = self.onPtrPullMove.bind(self);\n      self.onPtrPullEnd = self.onPtrPullEnd.bind(self);\n      self.onPtrRefresh = self.onPtrRefresh.bind(self);\n      self.onPtrDone = self.onPtrDone.bind(self);\n      self.onInfinite = self.onInfinite.bind(self);\n      self.onPageMounted = self.onPageMounted.bind(self);\n      self.onPageInit = self.onPageInit.bind(self);\n      self.onPageReinit = self.onPageReinit.bind(self);\n      self.onPageBeforeIn = self.onPageBeforeIn.bind(self);\n      self.onPageBeforeOut = self.onPageBeforeOut.bind(self);\n      self.onPageAfterOut = self.onPageAfterOut.bind(self);\n      self.onPageAfterIn = self.onPageAfterIn.bind(self);\n      self.onPageBeforeRemove = self.onPageBeforeRemove.bind(self);\n      self.onPageStack = self.onPageStack.bind(self);\n      self.onPageUnstack = self.onPageUnstack.bind(self);\n      self.onPagePosition = self.onPagePosition.bind(self);\n\n      if (ptr) {\n        el.addEventListener('ptr:pullstart', self.onPtrPullStart);\n        el.addEventListener('ptr:pullmove', self.onPtrPullMove);\n        el.addEventListener('ptr:pullend', self.onPtrPullEnd);\n        el.addEventListener('ptr:refresh', self.onPtrRefresh);\n        el.addEventListener('ptr:done', self.onPtrDone);\n      }\n\n      if (infinite) {\n        el.addEventListener('infinite', self.onInfinite);\n      }\n\n      el.addEventListener('page:mounted', self.onPageMounted);\n      el.addEventListener('page:init', self.onPageInit);\n      el.addEventListener('page:reinit', self.onPageReinit);\n      el.addEventListener('page:beforein', self.onPageBeforeIn);\n      el.addEventListener('page:beforeout', self.onPageBeforeOut);\n      el.addEventListener('page:afterout', self.onPageAfterOut);\n      el.addEventListener('page:afterin', self.onPageAfterIn);\n      el.addEventListener('page:beforeremove', self.onPageBeforeRemove);\n      el.addEventListener('page:stack', self.onPageStack);\n      el.addEventListener('page:unstack', self.onPageUnstack);\n      el.addEventListener('page:position', self.onPagePosition);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Page;\n}(React.Component);\n\n__reactComponentSetProps(F7Page, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  name: String,\n  stacked: Boolean,\n  withSubnavbar: {\n    type: Boolean,\n    default: undefined\n  },\n  subnavbar: {\n    type: Boolean,\n    default: undefined\n  },\n  noNavbar: Boolean,\n  noToolbar: Boolean,\n  tabs: Boolean,\n  pageContent: {\n    type: Boolean,\n    default: true\n  },\n  noSwipeback: Boolean,\n  ptr: Boolean,\n  ptrDistance: Number,\n  ptrPreloader: {\n    type: Boolean,\n    default: true\n  },\n  infinite: Boolean,\n  infiniteTop: Boolean,\n  infiniteDistance: Number,\n  infinitePreloader: {\n    type: Boolean,\n    default: true\n  },\n  hideBarsOnScroll: Boolean,\n  hideNavbarOnScroll: Boolean,\n  hideToolbarOnScroll: Boolean,\n  messagesContent: Boolean,\n  loginScreen: Boolean\n}, Mixins.colorProps));\n\nF7Page.displayName = 'f7-page';\nexport default F7Page;","map":null,"metadata":{},"sourceType":"module"}