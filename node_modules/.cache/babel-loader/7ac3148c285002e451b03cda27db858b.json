{"ast":null,"code":"/* eslint no-underscore-dangle: \"off\" */\nimport f7 from './f7';\nimport events from './events';\nimport Utils from './utils';\nvar routerComponentIdCounter = 0;\nexport default {\n  proto: {\n    pageComponentLoader: function pageComponentLoader(routerEl, component, componentUrl, options, resolve, reject) {\n      var router = this;\n      var el = routerEl;\n      var routerComponent;\n      f7.routers.views.forEach(function (data) {\n        if (data.el && data.el === routerEl) {\n          routerComponent = data.component;\n        }\n      });\n\n      if (!routerComponent || !routerComponent.state.pages) {\n        reject();\n        return;\n      }\n\n      var id = \"\".concat(Utils.now(), \"_\").concat(routerComponentIdCounter += 1);\n      var pageData = {\n        component: component,\n        id: id,\n        props: Utils.extend({\n          f7route: options.route,\n          f7router: router\n        }, options.route.params, options.props || {})\n      };\n      routerComponent.$f7router = router;\n      routerComponent.$f7route = options.route;\n      var resolved;\n\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData.component !== routerComponent || resolved) return;\n        events.off('viewRouterDidUpdate', onDidUpdate);\n        var pageEl = el.children[el.children.length - 1];\n        pageData.el = pageEl;\n        resolve(pageEl);\n        resolved = true;\n      }\n\n      events.on('viewRouterDidUpdate', onDidUpdate);\n      routerComponent.state.pages.push(pageData);\n      routerComponent.setState({\n        pages: routerComponent.state.pages\n      });\n    },\n    removePage: function removePage($pageEl) {\n      if (!$pageEl) return;\n      var router = this;\n      var f7Page;\n      if ('length' in $pageEl) f7Page = $pageEl[0].f7Page;else f7Page = $pageEl.f7Page;\n\n      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {\n        router.app.$($pageEl).remove();\n        return;\n      }\n\n      var routerComponent;\n      f7.routers.views.forEach(function (data) {\n        if (data.el && data.el === router.el) {\n          routerComponent = data.component;\n        }\n      });\n      var pageEl;\n\n      if ('length' in $pageEl) {\n        // Dom7\n        if ($pageEl.length === 0) return;\n        pageEl = $pageEl[0];\n      } else {\n        pageEl = $pageEl;\n      }\n\n      if (!pageEl) return;\n      var pageComponentFound;\n      routerComponent.state.pages.forEach(function (page, index) {\n        if (page.el === pageEl) {\n          pageComponentFound = true;\n          routerComponent.state.pages.splice(index, 1);\n          routerComponent.setState({\n            pages: routerComponent.state.pages\n          });\n        }\n      });\n\n      if (!pageComponentFound) {\n        pageEl.parentNode.removeChild(pageEl);\n      }\n    },\n    tabComponentLoader: function tabComponentLoader(tabEl, component, componentUrl, options, resolve, reject) {\n      var router = this;\n      if (!tabEl) reject();\n      var tabsComponent;\n      f7.routers.tabs.forEach(function (tabData) {\n        if (tabData.el && tabData.el === tabEl) {\n          tabsComponent = tabData.component;\n        }\n      });\n\n      if (!tabsComponent) {\n        reject();\n        return;\n      }\n\n      var id = \"\".concat(Utils.now(), \"_\").concat(routerComponentIdCounter += 1);\n      var tabContent = {\n        id: id,\n        component: component,\n        props: Utils.extend({\n          f7route: options.route,\n          f7router: router\n        }, options.route.params, options.props || {})\n      };\n      tabsComponent.$f7router = router;\n      tabsComponent.$f7route = options.route;\n      var resolved;\n\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData.component !== tabsComponent || resolved) return;\n        events.off('tabRouterDidUpdate', onDidUpdate);\n        var tabContentEl = tabEl.children[0];\n        resolve(tabContentEl);\n        resolved = true;\n      }\n\n      events.on('tabRouterDidUpdate', onDidUpdate);\n      tabsComponent.setState({\n        tabContent: tabContent\n      });\n    },\n    removeTabContent: function removeTabContent(tabEl) {\n      if (!tabEl) return;\n      var tabComponent;\n      f7.routers.tabs.forEach(function (tabData) {\n        if (tabData.el && tabData.el === tabEl) {\n          tabComponent = tabData.component;\n        }\n      });\n      var hasComponent = !!tabComponent.state.tabContent;\n\n      if (!tabComponent || !hasComponent) {\n        tabEl.innerHTML = ''; // eslint-disable-line\n\n        return;\n      }\n\n      tabComponent.setState({\n        tabContent: null\n      });\n    },\n    modalComponentLoader: function modalComponentLoader(rootEl, component, componentUrl, options, resolve, reject) {\n      var router = this;\n      var modalsComponent = f7.routers.modals && f7.routers.modals.component;\n      var modalsComponentEl = f7.routers.modals && f7.routers.modals.el;\n\n      if (!modalsComponent || !modalsComponent.state.modals) {\n        reject();\n        return;\n      }\n\n      var id = \"\".concat(Utils.now(), \"_\").concat(routerComponentIdCounter += 1);\n      var modalData = {\n        component: component,\n        id: id,\n        props: Utils.extend({\n          f7route: options.route,\n          f7router: router\n        }, options.route.params, options.props || {})\n      };\n      modalsComponent.$f7router = router;\n      modalsComponent.$f7route = options.route;\n      var resolved;\n\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData.component !== modalsComponent || resolved) return;\n        events.off('modalsRouterDidUpdate', onDidUpdate);\n        var modalEl = modalsComponentEl.children[modalsComponentEl.children.length - 1];\n        modalData.el = modalEl;\n        resolve(modalEl);\n        resolved = true;\n      }\n\n      events.on('modalsRouterDidUpdate', onDidUpdate);\n      modalsComponent.state.modals.push(modalData);\n      modalsComponent.setState({\n        modals: modalsComponent.state.modals\n      });\n    },\n    removeModal: function removeModal(modalEl) {\n      var modalsComponent = f7.routers.modals && f7.routers.modals.component;\n      if (!modalsComponent) return;\n      var modalDataToRemove;\n      modalsComponent.state.modals.forEach(function (modalData) {\n        if (modalData.el === modalEl) modalDataToRemove = modalData;\n      });\n      modalsComponent.state.modals.splice(modalsComponent.state.modals.indexOf(modalDataToRemove), 1);\n      modalsComponent.setState({\n        modals: modalsComponent.state.modals\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}