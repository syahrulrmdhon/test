{"ast":null,"code":"import _defineProperty from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Panel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Panel, _React$Component);\n\n  function F7Panel(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Panel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Panel).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7Panel, [{\n    key: \"onOpen\",\n    value: function onOpen(event) {\n      this.dispatchEvent('panel:open panelOpen', event);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(event) {\n      this.dispatchEvent('panel:opened panelOpened', event);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(event) {\n      this.dispatchEvent('panel:close panelClose', event);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(event) {\n      this.dispatchEvent('panel:closed panelClosed', event);\n    }\n  }, {\n    key: \"onBackdropClick\",\n    value: function onBackdropClick(event) {\n      this.dispatchEvent('panel:backdrop-click panelBackdropClick', event);\n    }\n  }, {\n    key: \"onPanelSwipe\",\n    value: function onPanelSwipe(event) {\n      this.dispatchEvent('panel:swipe panelSwipe', event);\n    }\n  }, {\n    key: \"onPanelSwipeOpen\",\n    value: function onPanelSwipeOpen(event) {\n      this.dispatchEvent('panel:swipeopen panelSwipeOpen', event);\n    }\n  }, {\n    key: \"onBreakpoint\",\n    value: function onBreakpoint(event) {\n      this.dispatchEvent('panel:breakpoint panelBreakpoint', event);\n    }\n  }, {\n    key: \"open\",\n    value: function open(animate) {\n      var self = this;\n      if (!self.$f7) return;\n      var side = self.props.side || (self.props.left ? 'left' : 'right');\n      self.$f7.panel.open(side, animate);\n    }\n  }, {\n    key: \"close\",\n    value: function close(animate) {\n      var self = this;\n      if (!self.$f7) return;\n      var side = self.props.side || (self.props.left ? 'left' : 'right');\n      self.$f7.panel.close(side, animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      var id = props.id,\n          style = props.style;\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: this.classes\n      }, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      if (self.f7Panel) self.f7Panel.destroy();\n      var el = self.refs.el;\n      if (!el) return;\n      el.removeEventListener('panel:open', self.onOpenBound);\n      el.removeEventListener('panel:opened', self.onOpenedBound);\n      el.removeEventListener('panel:close', self.onCloseBound);\n      el.removeEventListener('panel:closed', self.onClosedBound);\n      el.removeEventListener('panel:backdrop-click', self.onBackdropClickBound);\n      el.removeEventListener('panel:swipe', self.onPanelSwipeBound);\n      el.removeEventListener('panel:swipeopen', self.onPanelSwipeOpenBound);\n      el.removeEventListener('panel:breakpoint', self.onBreakpointBound);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      var _self$props = self.props,\n          side = _self$props.side,\n          effect = _self$props.effect,\n          opened = _self$props.opened,\n          left = _self$props.left,\n          reveal = _self$props.reveal;\n      self.onOpenBound = self.onOpen.bind(self);\n      self.onOpenedBound = self.onOpened.bind(self);\n      self.onCloseBound = self.onClose.bind(self);\n      self.onClosedBound = self.onClosed.bind(self);\n      self.onBackdropClickBound = self.onBackdropClick.bind(self);\n      self.onPanelSwipeBound = self.onPanelSwipe.bind(self);\n      self.onPanelSwipeOpenBound = self.onPanelSwipeOpen.bind(self);\n      self.onBreakpointBound = self.onBreakpoint.bind(self);\n\n      if (el) {\n        el.addEventListener('panel:open', self.onOpenBound);\n        el.addEventListener('panel:opened', self.onOpenedBound);\n        el.addEventListener('panel:close', self.onCloseBound);\n        el.addEventListener('panel:closed', self.onClosedBound);\n        el.addEventListener('panel:backdrop-click', self.onBackdropClickBound);\n        el.addEventListener('panel:swipe', self.onPanelSwipeBound);\n        el.addEventListener('panel:swipeopen', self.onPanelSwipeOpenBound);\n        el.addEventListener('panel:breakpoint', self.onBreakpointBound);\n      }\n\n      self.$f7ready(function () {\n        var $ = self.$$;\n        if (!$) return;\n\n        if ($('.panel-backdrop').length === 0) {\n          $('<div class=\"panel-backdrop\"></div>').insertBefore(el);\n        }\n\n        self.f7Panel = self.$f7.panel.create({\n          el: el\n        });\n      });\n\n      if (opened) {\n        el.style.display = 'block';\n      }\n\n      var $ = self.$$;\n      if (!$) return;\n      var panelSide = side || (left ? 'left' : 'right');\n      var panelEffect = effect || (reveal ? 'reveal' : 'cover');\n\n      if (opened) {\n        $('html').addClass(\"with-panel-\".concat(panelSide, \"-\").concat(panelEffect));\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.opened', prevProps, prevState, function (opened) {\n        var self = _this3;\n        if (!self.$f7) return;\n        var side = self.props.side || (self.props.left ? 'left' : 'right');\n\n        if (opened) {\n          self.$f7.panel.open(side);\n        } else {\n          self.$f7.panel.open(side);\n        }\n      });\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var _Utils$classNames;\n\n      var self = this;\n      var props = self.props;\n      var left = props.left,\n          reveal = props.reveal,\n          className = props.className,\n          opened = props.opened;\n      var side = props.side,\n          effect = props.effect;\n      side = side || (left ? 'left' : 'right');\n      effect = effect || (reveal ? 'reveal' : 'cover');\n      return Utils.classNames(className, 'panel', (_Utils$classNames = {\n        'panel-active': opened\n      }, _defineProperty(_Utils$classNames, \"panel-\".concat(side), side), _defineProperty(_Utils$classNames, \"panel-\".concat(effect), effect), _Utils$classNames), Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Panel;\n}(React.Component);\n\n__reactComponentSetProps(F7Panel, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  side: String,\n  effect: String,\n  cover: Boolean,\n  reveal: Boolean,\n  left: Boolean,\n  right: Boolean,\n  opened: Boolean\n}, Mixins.colorProps));\n\nF7Panel.displayName = 'f7-panel';\nexport default F7Panel;","map":null,"metadata":{},"sourceType":"module"}