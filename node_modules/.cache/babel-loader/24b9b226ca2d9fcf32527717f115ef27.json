{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Message =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Message, _React$Component);\n\n  function F7Message(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Message);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Message).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onNameClick = _this.onNameClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onTextClick = _this.onTextClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onAvatarClick = _this.onAvatarClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onHeaderClick = _this.onHeaderClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onFooterClick = _this.onFooterClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onBubbleClick = _this.onBubbleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Message, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"onNameClick\",\n    value: function onNameClick(event) {\n      this.dispatchEvent('click:name clickName', event);\n    }\n  }, {\n    key: \"onTextClick\",\n    value: function onTextClick(event) {\n      this.dispatchEvent('click:text clickText', event);\n    }\n  }, {\n    key: \"onAvatarClick\",\n    value: function onAvatarClick(event) {\n      this.dispatchEvent('click:avatar clickAvatar', event);\n    }\n  }, {\n    key: \"onHeaderClick\",\n    value: function onHeaderClick(event) {\n      this.dispatchEvent('click:header clickHeader', event);\n    }\n  }, {\n    key: \"onFooterClick\",\n    value: function onFooterClick(event) {\n      this.dispatchEvent('click:footer clickFooter', event);\n    }\n  }, {\n    key: \"onBubbleClick\",\n    value: function onBubbleClick(event) {\n      this.dispatchEvent('click:bubble clickBubble', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var text = props.text,\n          name = props.name,\n          avatar = props.avatar,\n          image = props.image,\n          header = props.header,\n          footer = props.footer,\n          textHeader = props.textHeader,\n          textFooter = props.textFooter,\n          typing = props.typing,\n          id = props.id,\n          style = props.style;\n      var _self$slots = self.slots,\n          slotsStart = _self$slots.start,\n          slotsEnd = _self$slots.end,\n          slotsDefault = _self$slots.default,\n          slotsContentStart = _self$slots['content-start'],\n          slotsContentEnd = _self$slots['content-end'],\n          slotsAvatar = _self$slots.avatar,\n          slotsName = _self$slots.name,\n          slotsHeader = _self$slots.header,\n          slotsFooter = _self$slots.footer,\n          slotsImage = _self$slots.image,\n          slotsText = _self$slots.text,\n          slotsTextHeader = _self$slots['text-header'],\n          slotsTextFooter = _self$slots['text-footer'],\n          slotsBubbleStart = _self$slots['bubble-start'],\n          slotsBubbleEnd = _self$slots['bubble-end'];\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: self.classes\n      }, slotsStart, (avatar || slotsAvatar) && React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['avatarEl'] = __reactNode;\n        },\n        className: 'message-avatar',\n        style: {\n          backgroundImage: avatar && \"url(\".concat(avatar, \")\")\n        }\n      }, slotsAvatar), React.createElement('div', {\n        className: 'message-content'\n      }, slotsContentStart, (slotsName || name) && React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['nameEl'] = __reactNode;\n        },\n        className: 'message-name'\n      }, slotsName || name), (slotsHeader || header) && React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['headerEl'] = __reactNode;\n        },\n        className: 'message-header'\n      }, slotsHeader || header), React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['bubbleEl'] = __reactNode;\n        },\n        className: 'message-bubble'\n      }, slotsBubbleStart, (slotsImage || image) && React.createElement('div', {\n        className: 'message-image'\n      }, slotsImage || React.createElement('img', {\n        src: image\n      })), (slotsTextHeader || textHeader) && React.createElement('div', {\n        className: 'message-text-header'\n      }, slotsTextHeader || textHeader), (slotsText || text || typing) && React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['textEl'] = __reactNode;\n        },\n        className: 'message-text'\n      }, slotsText || text, typing && React.createElement('div', {\n        className: 'message-typing-indicator'\n      }, React.createElement('div', null), React.createElement('div', null), React.createElement('div', null))), (slotsTextFooter || textFooter) && React.createElement('div', {\n        className: 'message-text-footer'\n      }, slotsTextFooter || textFooter), slotsBubbleEnd, slotsDefault), (slotsFooter || footer) && React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['footerEl'] = __reactNode;\n        },\n        className: 'message-footer'\n      }, slotsFooter || footer), slotsContentEnd), slotsEnd);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$refs = this.refs,\n          el = _this$refs.el,\n          nameEl = _this$refs.nameEl,\n          textEl = _this$refs.textEl,\n          avatarEl = _this$refs.avatarEl,\n          headerEl = _this$refs.headerEl,\n          footerEl = _this$refs.footerEl,\n          bubbleEl = _this$refs.bubbleEl;\n      el.removeEventListener('click', this.onClick);\n      if (nameEl) nameEl.removeEventListener('click', this.onNameClick);\n      if (textEl) textEl.removeEventListener('click', this.onTextClick);\n      if (avatarEl) avatarEl.removeEventListener('click', this.onAvatarClick);\n      if (headerEl) headerEl.removeEventListener('click', this.onHeaderClick);\n      if (footerEl) footerEl.removeEventListener('click', this.onFooterClick);\n      if (bubbleEl) bubbleEl.removeEventListener('click', this.onBubbleClick);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$refs2 = this.refs,\n          el = _this$refs2.el,\n          nameEl = _this$refs2.nameEl,\n          textEl = _this$refs2.textEl,\n          avatarEl = _this$refs2.avatarEl,\n          headerEl = _this$refs2.headerEl,\n          footerEl = _this$refs2.footerEl,\n          bubbleEl = _this$refs2.bubbleEl;\n      el.addEventListener('click', this.onClick);\n      if (nameEl) nameEl.addEventListener('click', this.onNameClick);\n      if (textEl) textEl.addEventListener('click', this.onTextClick);\n      if (avatarEl) avatarEl.addEventListener('click', this.onAvatarClick);\n      if (headerEl) headerEl.addEventListener('click', this.onHeaderClick);\n      if (footerEl) footerEl.addEventListener('click', this.onFooterClick);\n      if (bubbleEl) bubbleEl.addEventListener('click', this.onBubbleClick);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var type = props.type,\n          typing = props.typing,\n          first = props.first,\n          last = props.last,\n          tail = props.tail,\n          sameName = props.sameName,\n          sameHeader = props.sameHeader,\n          sameFooter = props.sameFooter,\n          sameAvatar = props.sameAvatar,\n          className = props.className;\n      return Utils.classNames(className, 'message', {\n        'message-sent': type === 'sent',\n        'message-received': type === 'received',\n        'message-typing': typing,\n        'message-first': first,\n        'message-last': last,\n        'message-tail': tail,\n        'message-same-name': sameName,\n        'message-same-header': sameHeader,\n        'message-same-footer': sameFooter,\n        'message-same-avatar': sameAvatar\n      }, Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Message;\n}(React.Component);\n\n__reactComponentSetProps(F7Message, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  text: String,\n  name: String,\n  avatar: String,\n  type: {\n    type: String,\n    default: 'sent'\n  },\n  image: String,\n  header: String,\n  footer: String,\n  textHeader: String,\n  textFooter: String,\n  first: Boolean,\n  last: Boolean,\n  tail: Boolean,\n  sameName: Boolean,\n  sameHeader: Boolean,\n  sameFooter: Boolean,\n  sameAvatar: Boolean,\n  typing: Boolean\n}, Mixins.colorProps));\n\nF7Message.displayName = 'f7-message';\nexport default F7Message;","map":null,"metadata":{},"sourceType":"module"}