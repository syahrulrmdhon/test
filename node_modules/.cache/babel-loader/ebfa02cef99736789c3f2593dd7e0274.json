{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Stepper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Stepper, _React$Component);\n\n  function F7Stepper(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Stepper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Stepper).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      _this.onInput = _this.onInput.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onMinusClick = _this.onMinusClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onPlusClick = _this.onPlusClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Stepper, [{\n    key: \"increment\",\n    value: function increment() {\n      if (!this.f7Stepper) return;\n      this.f7Stepper.increment();\n    }\n  }, {\n    key: \"decrement\",\n    value: function decrement() {\n      if (!this.f7Stepper) return;\n      this.f7Stepper.decrement();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(newValue) {\n      var self = this;\n      if (self.f7Stepper && self.f7Stepper.setValue) self.f7Stepper.setValue(newValue);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var self = this;\n\n      if (self.f7Stepper && self.f7Stepper.getValue) {\n        return self.f7Stepper.getValue();\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      var stepper = this.f7Stepper;\n      this.dispatchEvent('input', event, stepper);\n    }\n  }, {\n    key: \"onMinusClick\",\n    value: function onMinusClick(event) {\n      var stepper = this.f7Stepper;\n      this.dispatchEvent('stepper:minusclick stepperMinusClick', event, stepper);\n    }\n  }, {\n    key: \"onPlusClick\",\n    value: function onPlusClick(event) {\n      var stepper = this.f7Stepper;\n      this.dispatchEvent('stepper:plusclick stepperPlusClick', event, stepper);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var input = props.input,\n          buttonsOnly = props.buttonsOnly,\n          inputType = props.inputType,\n          value = props.value,\n          inputReadonly = props.inputReadonly,\n          min = props.min,\n          max = props.max,\n          step = props.step,\n          id = props.id,\n          style = props.style;\n      var inputWrapEl;\n      var valueEl;\n\n      if (input && !buttonsOnly) {\n        var inputEl;\n        {\n          inputEl = React.createElement('input', {\n            ref: function ref(__reactNode) {\n              _this2.__reactRefs['inputEl'] = __reactNode;\n            },\n            type: inputType,\n            min: inputType === 'number' ? min : undefined,\n            max: inputType === 'number' ? max : undefined,\n            step: inputType === 'number' ? step : undefined,\n            onInput: self.onInput,\n            value: value,\n            readOnly: inputReadonly\n          });\n        }\n        inputWrapEl = React.createElement('div', {\n          className: 'stepper-input-wrap'\n        }, inputEl);\n      }\n\n      if (!input && !buttonsOnly) {\n        valueEl = React.createElement('div', {\n          className: 'stepper-value'\n        }, value);\n      }\n\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: self.classes\n      }, React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['minusEl'] = __reactNode;\n        },\n        className: 'stepper-button-minus'\n      }), inputWrapEl, valueEl, React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['plusEl'] = __reactNode;\n        },\n        className: 'stepper-button-plus'\n      }));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var _self$refs = self.refs,\n          minusEl = _self$refs.minusEl,\n          plusEl = _self$refs.plusEl;\n\n      if (minusEl) {\n        minusEl.removeEventListener('click', self.onMinusClick);\n      }\n\n      if (plusEl) {\n        plusEl.removeEventListener('click', self.onPlusClick);\n      }\n\n      if (!self.props.init) return;\n\n      if (self.f7Stepper && self.f7Stepper.destroy) {\n        self.f7Stepper.destroy();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var _self$refs2 = self.refs,\n          minusEl = _self$refs2.minusEl,\n          plusEl = _self$refs2.plusEl;\n\n      if (minusEl) {\n        minusEl.addEventListener('click', self.onMinusClick);\n      }\n\n      if (plusEl) {\n        plusEl.addEventListener('click', self.onPlusClick);\n      }\n\n      if (!self.props.init) return;\n      self.$f7ready(function (f7) {\n        var _self$props = self.props,\n            min = _self$props.min,\n            max = _self$props.max,\n            value = _self$props.value,\n            step = _self$props.step,\n            formatValue = _self$props.formatValue,\n            autorepeat = _self$props.autorepeat,\n            autorepeatDynamic = _self$props.autorepeatDynamic,\n            wraps = _self$props.wraps,\n            manualInputMode = _self$props.manualInputMode,\n            decimalPoint = _self$props.decimalPoint,\n            buttonsEndInputMode = _self$props.buttonsEndInputMode;\n        var el = self.refs.el;\n        if (!el) return;\n        self.f7Stepper = f7.stepper.create(Utils.noUndefinedProps({\n          el: el,\n          min: min,\n          max: max,\n          value: value,\n          step: step,\n          formatValue: formatValue,\n          autorepeat: autorepeat,\n          autorepeatDynamic: autorepeatDynamic,\n          wraps: wraps,\n          manualInputMode: manualInputMode,\n          decimalPoint: decimalPoint,\n          buttonsEndInputMode: buttonsEndInputMode,\n          on: {\n            change: function change(stepper, newValue) {\n              self.dispatchEvent('stepper:change stepperChange', newValue);\n            }\n          }\n        }));\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var round = props.round,\n          roundIos = props.roundIos,\n          roundMd = props.roundMd,\n          fill = props.fill,\n          fillIos = props.fillIos,\n          fillMd = props.fillMd,\n          big = props.big,\n          bigIos = props.bigIos,\n          bigMd = props.bigMd,\n          small = props.small,\n          smallIos = props.smallIos,\n          smallMd = props.smallMd,\n          raised = props.raised,\n          disabled = props.disabled;\n      return Utils.classNames(self.props.className, 'stepper', {\n        disabled: disabled,\n        'stepper-round': round,\n        'stepper-round-ios': roundIos,\n        'stepper-round-md': roundMd,\n        'stepper-fill': fill,\n        'stepper-fill-ios': fillIos,\n        'stepper-fill-md': fillMd,\n        'stepper-big': big,\n        'stepper-big-ios': bigIos,\n        'stepper-big-md': bigMd,\n        'stepper-small': small,\n        'stepper-small-ios': smallIos,\n        'stepper-small-md': smallMd,\n        'stepper-raised': raised\n      }, Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Stepper;\n}(React.Component);\n\n__reactComponentSetProps(F7Stepper, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  init: {\n    type: Boolean,\n    default: true\n  },\n  value: {\n    type: Number,\n    default: 0\n  },\n  min: {\n    type: Number,\n    default: 0\n  },\n  max: {\n    type: Number,\n    default: 100\n  },\n  step: {\n    type: Number,\n    default: 1\n  },\n  formatValue: Function,\n  input: {\n    type: Boolean,\n    default: true\n  },\n  inputType: {\n    type: String,\n    default: 'text'\n  },\n  inputReadonly: {\n    type: Boolean,\n    default: false\n  },\n  autorepeat: {\n    type: Boolean,\n    default: false\n  },\n  autorepeatDynamic: {\n    type: Boolean,\n    default: false\n  },\n  wraps: {\n    type: Boolean,\n    default: false\n  },\n  manualInputMode: {\n    type: Boolean,\n    default: false\n  },\n  decimalPoint: {\n    type: Number,\n    default: 4\n  },\n  buttonsEndInputMode: {\n    type: Boolean,\n    default: true\n  },\n  disabled: Boolean,\n  buttonsOnly: Boolean,\n  round: Boolean,\n  roundMd: Boolean,\n  roundIos: Boolean,\n  fill: Boolean,\n  fillMd: Boolean,\n  fillIos: Boolean,\n  big: Boolean,\n  bigMd: Boolean,\n  bigIos: Boolean,\n  small: Boolean,\n  smallMd: Boolean,\n  smallIos: Boolean,\n  raised: Boolean\n}, Mixins.colorProps));\n\nF7Stepper.displayName = 'f7-stepper';\nexport default F7Stepper;","map":null,"metadata":{},"sourceType":"module"}