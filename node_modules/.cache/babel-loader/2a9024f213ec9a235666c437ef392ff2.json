{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7ListIndex =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7ListIndex, _React$Component);\n\n  function F7ListIndex(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7ListIndex);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7ListIndex).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7ListIndex, [{\n    key: \"update\",\n    value: function update() {\n      if (!this.f7ListIndex) return;\n      this.f7ListIndex.update();\n    }\n  }, {\n    key: \"scrollListToIndex\",\n    value: function scrollListToIndex(indexContent) {\n      if (!this.f7ListIndex) return;\n      this.f7ListIndex.scrollListToIndex(indexContent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style;\n      var classes = Utils.classNames(className, 'list-index', Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['default']);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      if (!self.props.init) return;\n      self.$f7ready(function (f7) {\n        var el = self.refs.el;\n        var _self$props = self.props,\n            listEl = _self$props.listEl,\n            indexes = _self$props.indexes,\n            iosItemHeight = _self$props.iosItemHeight,\n            mdItemHeight = _self$props.mdItemHeight,\n            scrollList = _self$props.scrollList,\n            label = _self$props.label;\n        self.f7ListIndex = f7.listIndex.create({\n          el: el,\n          listEl: listEl,\n          indexes: indexes,\n          iosItemHeight: iosItemHeight,\n          mdItemHeight: mdItemHeight,\n          scrollList: scrollList,\n          label: label,\n          on: {\n            select: function select(index, itemContent, itemIndex) {\n              self.dispatchEvent('listindex:select listIndexSelect', itemContent, itemIndex);\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (!this.props.init) return;\n\n      if (this.f7ListIndex && this.f7ListIndex.destroy) {\n        this.f7ListIndex.destroy();\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.indexes', prevProps, prevState, function () {\n        if (!_this3.f7ListIndex) return;\n        _this3.f7ListIndex.params.indexes = _this3.props.indexes;\n\n        _this3.update();\n      });\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7ListIndex;\n}(React.Component);\n\n__reactComponentSetProps(F7ListIndex, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  init: {\n    type: Boolean,\n    default: true\n  },\n  listEl: [String, Object],\n  indexes: {\n    type: [String, Array],\n    default: 'auto'\n  },\n  scrollList: {\n    type: Boolean,\n    default: true\n  },\n  label: {\n    type: Boolean,\n    default: false\n  },\n  iosItemHeight: {\n    type: Number,\n    default: 14\n  },\n  mdItemHeight: {\n    type: Number,\n    default: 14\n  }\n}, Mixins.colorProps));\n\nF7ListIndex.displayName = 'f7-list-index';\nexport default F7ListIndex;","map":null,"metadata":{},"sourceType":"module"}