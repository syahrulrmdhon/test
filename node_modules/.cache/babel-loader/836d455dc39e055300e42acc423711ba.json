{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7PageContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7PageContent, _React$Component);\n\n  function F7PageContent(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7PageContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7PageContent).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7PageContent, [{\n    key: \"onPtrPullStart\",\n    value: function onPtrPullStart(event) {\n      this.dispatchEvent('ptr:pullstart ptrPullStart', event);\n    }\n  }, {\n    key: \"onPtrPullMove\",\n    value: function onPtrPullMove(event) {\n      this.dispatchEvent('ptr:pullmove ptrPullMove', event);\n    }\n  }, {\n    key: \"onPtrPullEnd\",\n    value: function onPtrPullEnd(event) {\n      this.dispatchEvent('ptr:pullend ptrPullEnd', event);\n    }\n  }, {\n    key: \"onPtrRefresh\",\n    value: function onPtrRefresh(event) {\n      var done = event.detail;\n      this.dispatchEvent('ptr:refresh ptrRefresh', event, done);\n    }\n  }, {\n    key: \"onPtrDone\",\n    value: function onPtrDone(event) {\n      this.dispatchEvent('ptr:done ptrDone', event);\n    }\n  }, {\n    key: \"onInfinite\",\n    value: function onInfinite(event) {\n      this.dispatchEvent('infinite', event);\n    }\n  }, {\n    key: \"onTabShow\",\n    value: function onTabShow(event) {\n      this.dispatchEvent('tab:show tabShow', event);\n    }\n  }, {\n    key: \"onTabHide\",\n    value: function onTabHide(event) {\n      this.dispatchEvent('tab:hide tabHide', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var ptr = props.ptr,\n          ptrPreloader = props.ptrPreloader,\n          infinite = props.infinite,\n          infinitePreloader = props.infinitePreloader,\n          id = props.id,\n          style = props.style,\n          ptrDistance = props.ptrDistance,\n          infiniteDistance = props.infiniteDistance,\n          infiniteTop = props.infiniteTop;\n      var ptrEl;\n      var infiniteEl;\n\n      if (ptr && ptrPreloader) {\n        ptrEl = React.createElement('div', {\n          className: 'ptr-preloader'\n        }, React.createElement('div', {\n          className: 'preloader'\n        }), React.createElement('div', {\n          className: 'ptr-arrow'\n        }));\n      }\n\n      if (infinite && infinitePreloader) {\n        infiniteEl = React.createElement('div', {\n          className: 'preloader infinite-scroll-preloader'\n        });\n      }\n\n      return React.createElement('div', {\n        id: id,\n        style: style,\n        className: self.classes,\n        'data-ptr-distance': ptrDistance || undefined,\n        'data-infinite-distance': infiniteDistance || undefined,\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        }\n      }, ptrEl, infiniteTop ? infiniteEl : self.slots.default, infiniteTop ? self.slots.default : infiniteEl);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      el.removeEventListener('ptr:pullstart', self.onPtrPullStart);\n      el.removeEventListener('ptr:pullmove', self.onPtrPullMove);\n      el.removeEventListener('ptr:pullend', self.onPtrPullEnd);\n      el.removeEventListener('ptr:refresh', self.onPtrRefresh);\n      el.removeEventListener('ptr:done', self.onPtrDone);\n      el.removeEventListener('infinite', self.onInfinite);\n      el.removeEventListener('tab:show', self.onTabShow);\n      el.removeEventListener('tab:hide', self.onTabHide);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      var _self$props = self.props,\n          ptr = _self$props.ptr,\n          infinite = _self$props.infinite,\n          tab = _self$props.tab;\n      self.onPtrPullStart = self.onPtrPullStart.bind(self);\n      self.onPtrPullMove = self.onPtrPullMove.bind(self);\n      self.onPtrPullEnd = self.onPtrPullEnd.bind(self);\n      self.onPtrRefresh = self.onPtrRefresh.bind(self);\n      self.onPtrDone = self.onPtrDone.bind(self);\n      self.onInfinite = self.onInfinite.bind(self);\n      self.onTabShow = self.onTabShow.bind(self);\n      self.onTabHide = self.onTabHide.bind(self);\n\n      if (ptr) {\n        el.addEventListener('ptr:pullstart', self.onPtrPullStart);\n        el.addEventListener('ptr:pullmove', self.onPtrPullMove);\n        el.addEventListener('ptr:pullend', self.onPtrPullEnd);\n        el.addEventListener('ptr:refresh', self.onPtrRefresh);\n        el.addEventListener('ptr:done', self.onPtrDone);\n      }\n\n      if (infinite) {\n        el.addEventListener('infinite', self.onInfinite);\n      }\n\n      if (tab) {\n        el.addEventListener('tab:show', self.onTabShow);\n        el.addEventListener('tab:hide', self.onTabHide);\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          tab = props.tab,\n          tabActive = props.tabActive,\n          ptr = props.ptr,\n          infinite = props.infinite,\n          infiniteTop = props.infiniteTop,\n          hideBarsOnScroll = props.hideBarsOnScroll,\n          hideNavbarOnScroll = props.hideNavbarOnScroll,\n          hideToolbarOnScroll = props.hideToolbarOnScroll,\n          messagesContent = props.messagesContent,\n          loginScreen = props.loginScreen;\n      return Utils.classNames(className, 'page-content', {\n        tab: tab,\n        'tab-active': tabActive,\n        'ptr-content': ptr,\n        'infinite-scroll-content': infinite,\n        'infinite-scroll-top': infiniteTop,\n        'hide-bars-on-scroll': hideBarsOnScroll,\n        'hide-navbar-on-scroll': hideNavbarOnScroll,\n        'hide-toolbar-on-scroll': hideToolbarOnScroll,\n        'messages-content': messagesContent,\n        'login-screen-content': loginScreen\n      }, Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7PageContent;\n}(React.Component);\n\n__reactComponentSetProps(F7PageContent, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  tab: Boolean,\n  tabActive: Boolean,\n  ptr: Boolean,\n  ptrDistance: Number,\n  ptrPreloader: {\n    type: Boolean,\n    default: true\n  },\n  infinite: Boolean,\n  infiniteTop: Boolean,\n  infiniteDistance: Number,\n  infinitePreloader: {\n    type: Boolean,\n    default: true\n  },\n  hideBarsOnScroll: Boolean,\n  hideNavbarOnScroll: Boolean,\n  hideToolbarOnScroll: Boolean,\n  messagesContent: Boolean,\n  loginScreen: Boolean\n}, Mixins.colorProps));\n\nF7PageContent.displayName = 'f7-page-content';\nexport default F7PageContent;","map":null,"metadata":{},"sourceType":"module"}