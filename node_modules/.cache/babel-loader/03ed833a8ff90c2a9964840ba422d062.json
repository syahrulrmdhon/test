{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport f7 from '../utils/f7';\nimport events from '../utils/events';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7View =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7View, _React$Component);\n\n  function F7View(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7View).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        pages: []\n      };\n    }();\n\n    (function () {\n      var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n      self.onSwipeBackMoveBound = self.onSwipeBackMove.bind(self);\n      self.onSwipeBackBeforeChangeBound = self.onSwipeBackBeforeChange.bind(self);\n      self.onSwipeBackAfterChangeBound = self.onSwipeBackAfterChange.bind(self);\n      self.onSwipeBackBeforeResetBound = self.onSwipeBackBeforeReset.bind(self);\n      self.onSwipeBackAfterResetBound = self.onSwipeBackAfterReset.bind(self);\n      self.onTabShowBound = self.onTabShow.bind(self);\n      self.onTabHideBound = self.onTabHide.bind(self);\n      self.onViewInitBound = self.onViewInit.bind(self);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7View, [{\n    key: \"onViewInit\",\n    value: function onViewInit(event) {\n      var self = this;\n      var view = event.detail;\n      self.dispatchEvent('view:init viewInit', event, view);\n\n      if (!self.props.init) {\n        self.routerData.instance = view;\n        self.f7View = self.routerData.instance;\n      }\n    }\n  }, {\n    key: \"onSwipeBackMove\",\n    value: function onSwipeBackMove(event) {\n      var swipeBackData = event.detail;\n      this.dispatchEvent('swipeback:move swipeBackMove', event, swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackBeforeChange\",\n    value: function onSwipeBackBeforeChange(event) {\n      var swipeBackData = event.detail;\n      this.dispatchEvent('swipeback:beforechange swipeBackBeforeChange', event, swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackAfterChange\",\n    value: function onSwipeBackAfterChange(event) {\n      var swipeBackData = event.detail;\n      this.dispatchEvent('swipeback:afterchange swipeBackAfterChange', event, swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackBeforeReset\",\n    value: function onSwipeBackBeforeReset(event) {\n      var swipeBackData = event.detail;\n      this.dispatchEvent('swipeback:beforereset swipeBackBeforeReset', event, swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackAfterReset\",\n    value: function onSwipeBackAfterReset(event) {\n      var swipeBackData = event.detail;\n      this.dispatchEvent('swipeback:afterreset swipeBackAfterReset', event, swipeBackData);\n    }\n  }, {\n    key: \"onTabShow\",\n    value: function onTabShow(event) {\n      this.dispatchEvent('tab:show tabShow', event);\n    }\n  }, {\n    key: \"onTabHide\",\n    value: function onTabHide(event) {\n      this.dispatchEvent('tab:hide tabHide', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          tab = props.tab,\n          main = props.main,\n          tabActive = props.tabActive,\n          className = props.className;\n      var classes = Utils.classNames(className, 'view', {\n        'view-main': main,\n        'tab-active': tabActive,\n        tab: tab\n      }, Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['default'], self.state.pages.map(function (page) {\n        var PageComponent = page.component;\n        {\n          return React.createElement(PageComponent, Object.assign({\n            key: page.id\n          }, page.props));\n        }\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      if (!self.routerData) return;\n      events.emit('viewRouterDidUpdate', self.routerData);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      el.removeEventListener('swipeback:move', self.onSwipeBackMoveBound);\n      el.removeEventListener('swipeback:beforechange', self.onSwipeBackBeforeChangeBound);\n      el.removeEventListener('swipeback:afterchange', self.onSwipeBackAfterChangeBound);\n      el.removeEventListener('swipeback:beforereset', self.onSwipeBackBeforeResetBound);\n      el.removeEventListener('swipeback:afterreset', self.onSwipeBackAfterResetBound);\n      el.removeEventListener('tab:show', self.onTabShowBound);\n      el.removeEventListener('tab:hide', self.onTabHideBound);\n      el.removeEventListener('view:init', self.onViewInitBound);\n      if (!self.props.init) return;\n      if (self.f7View && self.f7View.destroy) self.f7View.destroy();\n      f7.routers.views.splice(f7.routers.views.indexOf(self.routerData), 1);\n      self.routerData = null;\n      delete self.routerData;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      el.addEventListener('swipeback:move', self.onSwipeBackMoveBound);\n      el.addEventListener('swipeback:beforechange', self.onSwipeBackBeforeChangeBound);\n      el.addEventListener('swipeback:afterchange', self.onSwipeBackAfterChangeBound);\n      el.addEventListener('swipeback:beforereset', self.onSwipeBackBeforeResetBound);\n      el.addEventListener('swipeback:afterreset', self.onSwipeBackAfterResetBound);\n      el.addEventListener('tab:show', self.onTabShowBound);\n      el.addEventListener('tab:hide', self.onTabHideBound);\n      el.addEventListener('view:init', self.onViewInitBound);\n      self.setState({\n        pages: []\n      });\n      self.$f7ready(function (f7Instance) {\n        self.routerData = {\n          el: el,\n          component: self,\n          instance: null\n        };\n        f7.routers.views.push(self.routerData);\n        if (!self.props.init) return;\n        self.routerData.instance = f7Instance.views.create(el, Utils.noUndefinedProps(self.props));\n        self.f7View = self.routerData.instance;\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7View;\n}(React.Component);\n\n__reactComponentSetProps(F7View, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  tab: Boolean,\n  tabActive: Boolean,\n  name: String,\n  router: Boolean,\n  linksView: [Object, String],\n  url: String,\n  main: Boolean,\n  stackPages: Boolean,\n  xhrCache: Boolean,\n  xhrCacheIgnore: Array,\n  xhrCacheIgnoreGetParameters: Boolean,\n  xhrCacheDuration: Number,\n  preloadPreviousPage: Boolean,\n  allowDuplicateUrls: Boolean,\n  reloadPages: Boolean,\n  removeElements: Boolean,\n  removeElementsWithTimeout: Boolean,\n  removeElementsTimeout: Number,\n  restoreScrollTopOnBack: Boolean,\n  iosSwipeBack: Boolean,\n  iosSwipeBackAnimateShadow: Boolean,\n  iosSwipeBackAnimateOpacity: Boolean,\n  iosSwipeBackActiveArea: Number,\n  iosSwipeBackThreshold: Number,\n  mdSwipeBack: Boolean,\n  mdSwipeBackAnimateShadow: Boolean,\n  mdSwipeBackAnimateOpacity: Boolean,\n  mdSwipeBackActiveArea: Number,\n  mdSwipeBackThreshold: Number,\n  pushState: Boolean,\n  pushStateRoot: String,\n  pushStateAnimate: Boolean,\n  pushStateAnimateOnLoad: Boolean,\n  pushStateSeparator: String,\n  pushStateOnLoad: Boolean,\n  animate: Boolean,\n  iosDynamicNavbar: Boolean,\n  iosSeparateDynamicNavbar: Boolean,\n  iosAnimateNavbarBackIcon: Boolean,\n  materialPageLoadDelay: Number,\n  passRouteQueryToRequest: Boolean,\n  passRouteParamsToRequest: Boolean,\n  routes: Array,\n  routesAdd: Array,\n  routesBeforeEnter: [Function, Array],\n  routesBeforeLeave: [Function, Array],\n  init: {\n    type: Boolean,\n    default: true\n  }\n}, Mixins.colorProps));\n\nF7View.displayName = 'f7-view';\nexport default F7View;","map":null,"metadata":{},"sourceType":"module"}