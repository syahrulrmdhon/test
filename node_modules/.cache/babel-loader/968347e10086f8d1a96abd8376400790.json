{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Gauge =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Gauge, _React$Component);\n\n  function F7Gauge(props, context) {\n    _classCallCheck(this, F7Gauge);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(F7Gauge).call(this, props, context));\n  }\n\n  _createClass(F7Gauge, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style,\n          type = props.type,\n          value = props.value,\n          size = props.size,\n          bgColor = props.bgColor,\n          borderBgColor = props.borderBgColor,\n          borderColor = props.borderColor,\n          borderWidth = props.borderWidth,\n          valueText = props.valueText,\n          valueTextColor = props.valueTextColor,\n          valueFontSize = props.valueFontSize,\n          valueFontWeight = props.valueFontWeight,\n          labelText = props.labelText,\n          labelTextColor = props.labelTextColor,\n          labelFontSize = props.labelFontSize,\n          labelFontWeight = props.labelFontWeight;\n      var classes = Utils.classNames(className, 'gauge');\n      var semiCircle = type === 'semicircle';\n      var radius = size / 2 - borderWidth / 2;\n      var length = 2 * Math.PI * radius;\n      var progress = Math.max(Math.min(value, 1), 0);\n      return React.createElement('div', {\n        id: id,\n        style: style,\n        className: classes\n      }, React.createElement('svg', {\n        className: 'gauge-svg',\n        width: \"\".concat(size, \"px\"),\n        height: \"\".concat(semiCircle ? size / 2 : size, \"px\"),\n        viewBox: \"0 0 \".concat(size, \" \").concat(semiCircle ? size / 2 : size)\n      }, semiCircle && React.createElement('path', {\n        className: 'gauge-back-semi',\n        d: \"M\".concat(size - borderWidth / 2, \",\").concat(size / 2, \" a1,1 0 0,0 -\").concat(size - borderWidth, \",0\"),\n        stroke: borderBgColor,\n        strokeWidth: borderWidth,\n        fill: bgColor || 'none'\n      }), semiCircle && React.createElement('path', {\n        className: 'gauge-front-semi',\n        d: \"M\".concat(size - borderWidth / 2, \",\").concat(size / 2, \" a1,1 0 0,0 -\").concat(size - borderWidth, \",0\"),\n        stroke: borderColor,\n        strokeWidth: borderWidth,\n        strokeDasharray: length / 2,\n        strokeDashoffset: length / 2 * (1 + progress),\n        fill: borderBgColor ? 'none' : bgColor || 'none'\n      }), !semiCircle && borderBgColor && React.createElement('circle', {\n        className: 'gauge-back-circle',\n        stroke: borderBgColor,\n        strokeWidth: borderWidth,\n        fill: bgColor || 'none',\n        cx: size / 2,\n        cy: size / 2,\n        r: radius\n      }), !semiCircle && React.createElement('circle', {\n        className: 'gauge-front-circle',\n        transform: \"rotate(-90 \".concat(size / 2, \" \").concat(size / 2, \")\"),\n        stroke: borderColor,\n        strokeWidth: borderWidth,\n        strokeDasharray: length,\n        strokeDashoffset: length * (1 - progress),\n        fill: borderBgColor ? 'none' : bgColor || 'none',\n        cx: size / 2,\n        cy: size / 2,\n        r: radius\n      }), valueText && React.createElement('text', {\n        className: 'gauge-value-text',\n        x: '50%',\n        y: semiCircle ? '100%' : '50%',\n        fontWeight: valueFontWeight,\n        fontSize: valueFontSize,\n        fill: valueTextColor,\n        dy: semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0,\n        textAnchor: 'middle',\n        dominantBaseline: !semiCircle ? 'middle' : null\n      }, valueText), labelText && React.createElement('text', {\n        className: 'gauge-label-text',\n        x: '50%',\n        y: semiCircle ? '100%' : '50%',\n        fontWeight: labelFontWeight,\n        fontSize: labelFontSize,\n        fill: labelTextColor,\n        dy: semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0,\n        textAnchor: 'middle',\n        dominantBaseline: !semiCircle ? 'middle' : null\n      }, labelText)));\n    }\n  }]);\n\n  return F7Gauge;\n}(React.Component);\n\n__reactComponentSetProps(F7Gauge, {\n  id: [String, Number],\n  className: String,\n  style: Object,\n  type: {\n    type: String,\n    default: 'circle'\n  },\n  value: {\n    type: [Number, String],\n    default: 0\n  },\n  size: {\n    type: [Number, String],\n    default: 200\n  },\n  bgColor: {\n    type: String,\n    default: 'transparent'\n  },\n  borderBgColor: {\n    type: String,\n    default: '#eeeeee'\n  },\n  borderColor: {\n    type: String,\n    default: '#000000'\n  },\n  borderWidth: {\n    type: [Number, String],\n    default: 10\n  },\n  valueText: [Number, String],\n  valueTextColor: {\n    type: String,\n    default: '#000000'\n  },\n  valueFontSize: {\n    type: [Number, String],\n    default: 31\n  },\n  valueFontWeight: {\n    type: [Number, String],\n    default: 500\n  },\n  labelText: String,\n  labelTextColor: {\n    type: String,\n    default: '#888888'\n  },\n  labelFontSize: {\n    type: [Number, String],\n    default: 14\n  },\n  labelFontWeight: {\n    type: [Number, String],\n    default: 400\n  }\n});\n\nF7Gauge.displayName = 'f7-gauge';\nexport default F7Gauge;","map":null,"metadata":{},"sourceType":"module"}