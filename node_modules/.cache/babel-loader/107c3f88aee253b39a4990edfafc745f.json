{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Chip =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Chip, _React$Component);\n\n  function F7Chip(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Chip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Chip).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onDeleteClick = _this.onDeleteClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Chip, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"onDeleteClick\",\n    value: function onDeleteClick(event) {\n      this.dispatchEvent('delete', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var media = props.media,\n          text = props.text,\n          deleteable = props.deleteable,\n          className = props.className,\n          id = props.id,\n          style = props.style,\n          mediaTextColor = props.mediaTextColor,\n          mediaBgColor = props.mediaBgColor,\n          outline = props.outline;\n      var mediaEl;\n      var labelEl;\n      var deleteEl;\n\n      if (media || self.slots && self.slots.media) {\n        var mediaClasses = Utils.classNames('chip-media', mediaTextColor && \"text-color-\".concat(mediaTextColor), mediaBgColor && \"bg-color-\".concat(mediaBgColor));\n        mediaEl = React.createElement('div', {\n          className: mediaClasses\n        }, media || this.slots['media']);\n      }\n\n      if (text || self.slots && self.slots.text) {\n        labelEl = React.createElement('div', {\n          className: 'chip-label'\n        }, text, this.slots['text']);\n      }\n\n      if (deleteable) {\n        deleteEl = React.createElement('a', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['deleteEl'] = __reactNode;\n          },\n          href: '#',\n          className: 'chip-delete'\n        });\n      }\n\n      var classes = Utils.classNames(className, 'chip', {\n        'chip-outline': outline\n      }, Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, mediaEl, labelEl, deleteEl);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.refs.el.removeEventListener('click', this.onClick);\n\n      if (this.refs.deleteEl) {\n        this.refs.deleteEl.removeEventListener('click', this.onDeleteClick);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.refs.el.addEventListener('click', this.onClick);\n\n      if (this.refs.deleteEl) {\n        this.refs.deleteEl.addEventListener('click', this.onDeleteClick);\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Chip;\n}(React.Component);\n\n__reactComponentSetProps(F7Chip, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  media: String,\n  text: [String, Number],\n  deleteable: Boolean,\n  mediaBgColor: String,\n  mediaTextColor: String,\n  outline: Boolean\n}, Mixins.colorProps));\n\nF7Chip.displayName = 'f7-chip';\nexport default F7Chip;","map":null,"metadata":{},"sourceType":"module"}