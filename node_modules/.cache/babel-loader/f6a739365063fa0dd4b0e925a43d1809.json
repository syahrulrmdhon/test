{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7NavLeft from './nav-left';\nimport F7NavTitle from './nav-title';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Navbar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Navbar, _React$Component);\n\n  function F7Navbar(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Navbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Navbar).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7Navbar, [{\n    key: \"hide\",\n    value: function hide(animate) {\n      var self = this;\n      if (!self.$f7) return;\n      self.$f7.navbar.hide(self.refs.el, animate);\n    }\n  }, {\n    key: \"show\",\n    value: function show(animate) {\n      var self = this;\n      if (!self.$f7) return;\n      self.$f7.navbar.show(self.refs.el, animate);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      var self = this;\n      if (!self.$f7) return;\n      self.$f7.navbar.size(self.refs.el);\n    }\n  }, {\n    key: \"onBackClick\",\n    value: function onBackClick(event) {\n      this.dispatchEvent('back-click backClick click:back clickBack', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var backLink = props.backLink,\n          backLinkUrl = props.backLinkUrl,\n          backLinkForce = props.backLinkForce,\n          sliding = props.sliding,\n          title = props.title,\n          subtitle = props.subtitle,\n          inner = props.inner,\n          innerClass = props.innerClass,\n          innerClassName = props.innerClassName,\n          className = props.className,\n          id = props.id,\n          style = props.style,\n          hidden = props.hidden,\n          noShadow = props.noShadow,\n          noHairline = props.noHairline;\n      var innerEl;\n      var leftEl;\n      var titleEl;\n\n      if (inner) {\n        if (backLink) {\n          leftEl = React.createElement(F7NavLeft, {\n            backLink: backLink,\n            backLinkUrl: backLinkUrl,\n            backLinkForce: backLinkForce,\n            onBackClick: self.onBackClick.bind(self)\n          });\n        }\n\n        if (title || subtitle) {\n          titleEl = React.createElement(F7NavTitle, {\n            title: title,\n            subtitle: subtitle\n          });\n        }\n\n        innerEl = React.createElement('div', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['inner'] = __reactNode;\n          },\n          className: Utils.classNames('navbar-inner', innerClass, innerClassName, {\n            sliding: sliding\n          })\n        }, leftEl, titleEl, this.slots['default']);\n      }\n\n      var classes = Utils.classNames(className, 'navbar', {\n        'navbar-hidden': hidden,\n        'no-shadow': noShadow,\n        'no-hairline': noHairline\n      }, Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['before-inner'], innerEl, this.slots['after-inner']);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      if (!self.$f7) return;\n      var el = self.refs.el;\n\n      if (el && el.children && el.children.length) {\n        self.$f7.navbar.size(el);\n      } else if (self.refs.inner) {\n        self.$f7.navbar.size(self.refs.inner);\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Navbar;\n}(React.Component);\n\n__reactComponentSetProps(F7Navbar, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  backLink: [Boolean, String],\n  backLinkUrl: String,\n  backLinkForce: Boolean,\n  sliding: {\n    type: Boolean,\n    default: true\n  },\n  title: String,\n  subtitle: String,\n  hidden: Boolean,\n  noShadow: Boolean,\n  noHairline: Boolean,\n  inner: {\n    type: Boolean,\n    default: true\n  },\n  innerClass: String,\n  innerClassName: String\n}, Mixins.colorProps));\n\nF7Navbar.displayName = 'f7-navbar';\nexport default F7Navbar;","map":null,"metadata":{},"sourceType":"module"}