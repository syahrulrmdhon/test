{"ast":null,"code":"import _toConsumableArray from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Badge from './badge';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7ListItemContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7ListItemContent, _React$Component);\n\n  function F7ListItemContent(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7ListItemContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7ListItemContent).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        hasInput: false,\n        hasInlineLabel: false,\n        hasInputInfo: false,\n        hasInputErrorMessage: false,\n        hasInputValue: false,\n        hasInputFocused: false,\n        hasInputInvalid: false\n      };\n    }();\n\n    (function () {\n      var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n      self.onClick = self.onClick.bind(self);\n      self.onChange = self.onChange.bind(self);\n      self.onFocus = self.onFocus.bind(self);\n      self.onBlur = self.onBlur.bind(self);\n      self.onEmpty = self.onEmpty.bind(self);\n      self.onNotEmpty = self.onNotEmpty.bind(self);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7ListItemContent, [{\n    key: \"checkHasInputState\",\n    value: function checkHasInputState() {\n      var self = this;\n      var props = self.props;\n      var itemInput = props.itemInput,\n          inlineLabel = props.inlineLabel,\n          itemInputWithInfo = props.itemInputWithInfo;\n      var hasInput = itemInput || self.state.hasInput;\n      var hasInlineLabel = inlineLabel || self.state.hasInlineLabel;\n      var hasInputInfo = itemInputWithInfo || self.state.hasInputInfo;\n      var hasInputErrorMessage = self.state.hasInputErrorMessage;\n\n      if (hasInput && !self.state.hasInput) {\n        self.hasInputSet = true;\n        self.setState({\n          hasInput: hasInput\n        });\n      } else if (!hasInput) {\n        self.hasInputSet = false;\n      }\n\n      if (hasInputInfo && !self.state.hasInputInfo) {\n        self.hasInputInfoSet = true;\n        self.setState({\n          hasInputInfo: hasInputInfo\n        });\n      } else if (!hasInputInfo) {\n        self.hasInputInfoSet = false;\n      }\n\n      if (hasInputErrorMessage && !self.state.hasInputErrorMessage) {\n        self.hasInputErrorMessageSet = true;\n        self.setState({\n          hasInputErrorMessage: hasInputErrorMessage\n        });\n      } else if (!hasInputInfo) {\n        self.hasInputErrorMessageSet = false;\n      }\n\n      if (hasInlineLabel && !self.state.hasInlineLabel) {\n        self.hasInlineLabelSet = true;\n        self.setState({\n          hasInlineLabel: hasInlineLabel\n        });\n      } else if (!hasInlineLabel) {\n        self.hasInlineLabelSet = false;\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.dispatchEvent('change', event);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.setState({\n        hasInputFocused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.setState({\n        hasInputFocused: false\n      });\n    }\n  }, {\n    key: \"onEmpty\",\n    value: function onEmpty() {\n      this.setState({\n        hasInputValue: false\n      });\n    }\n  }, {\n    key: \"onNotEmpty\",\n    value: function onNotEmpty() {\n      this.setState({\n        hasInputValue: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          className = props.className,\n          style = props.style,\n          radio = props.radio,\n          checkbox = props.checkbox,\n          value = props.value,\n          name = props.name,\n          checked = props.checked,\n          defaultChecked = props.defaultChecked,\n          readonly = props.readonly,\n          disabled = props.disabled,\n          required = props.required,\n          media = props.media,\n          header = props.header,\n          footer = props.footer,\n          title = props.title,\n          subtitle = props.subtitle,\n          text = props.text,\n          after = props.after,\n          badge = props.badge,\n          mediaList = props.mediaList,\n          mediaItem = props.mediaItem,\n          badgeColor = props.badgeColor,\n          itemInput = props.itemInput,\n          inlineLabel = props.inlineLabel,\n          itemInputWithInfo = props.itemInputWithInfo;\n      var hasInputFocused = self.state.hasInputFocused;\n      var hasInputInvalid = self.state.hasInputInvalid;\n      var hasInputValue = self.state.hasInputValue;\n      var hasInput = itemInput || self.state.hasInput;\n      var hasInlineLabel = inlineLabel || self.state.hasInlineLabel;\n      var hasInputInfo = itemInputWithInfo || self.state.hasInputInfo;\n      var hasInputErrorMessage = self.state.hasInputErrorMessage;\n      var slotsContentStart = [];\n      var slotsContent = [];\n      var slotsContentEnd = [];\n      var slotsInnerStart = [];\n      var slotsInner = [];\n      var slotsInnerEnd = [];\n      var slotsAfterStart = [];\n      var slotsAfter = [];\n      var slotsAfterEnd = [];\n      var slotsMedia = [];\n      var slotsBeforeTitle = [];\n      var slotsTitle = [];\n      var slotsAfterTitle = [];\n      var slotsSubtitle = [];\n      var slotsText = [];\n      var slotsHeader = [];\n      var slotsFooter = [];\n      var titleEl;\n      var afterWrapEl;\n      var afterEl;\n      var badgeEl;\n      var innerEl;\n      var titleRowEl;\n      var subtitleEl;\n      var textEl;\n      var mediaEl;\n      var inputEl;\n      var inputIconEl;\n      var headerEl;\n      var footerEl;\n      var slots = self.slots.default;\n      var flattenSlots = [];\n\n      if (slots && slots.length) {\n        slots.forEach(function (slot) {\n          if (Array.isArray(slot)) flattenSlots.push.apply(flattenSlots, _toConsumableArray(slot));else flattenSlots.push(slot);\n        });\n      }\n\n      flattenSlots.forEach(function (child) {\n        if (typeof child === 'undefined') return;\n        {\n          var tag = child.type && (child.type.displayName || child.type.name);\n\n          if (tag === 'F7Input' || tag === 'f7-input') {\n            hasInput = true;\n            if (child.props && child.props.info) hasInputInfo = true;\n            if (child.props && child.props.errorMessage && child.props.errorMessageForce) hasInputErrorMessage = true;\n\n            if (!hasInputValue) {\n              if (child.props && (typeof child.props.value === 'undefined' ? child.props.defaultValue || child.props.defaultValue === 0 : child.props.value || child.props.value === 0)) hasInputValue = true;else hasInputValue = false;\n            }\n          }\n\n          if (tag === 'F7Label' || tag === 'f7-label') {\n            if (child.props && child.props.inline) hasInlineLabel = true;\n          }\n        }\n        var slotName;\n        slotName = child.props ? child.props.slot : undefined;\n        if (!slotName || slotName === 'inner') slotsInner.push(child);\n        if (slotName === 'content-start') slotsContentStart.push(child);\n        if (slotName === 'content') slotsContent.push(child);\n        if (slotName === 'content-end') slotsContentEnd.push(child);\n        if (slotName === 'after-start') slotsAfterStart.push(child);\n        if (slotName === 'after') slotsAfter.push(child);\n        if (slotName === 'after-end') slotsAfterEnd.push(child);\n        if (slotName === 'media') slotsMedia.push(child);\n        if (slotName === 'inner-start') slotsInnerStart.push(child);\n        if (slotName === 'inner-end') slotsInnerEnd.push(child);\n        if (slotName === 'before-title') slotsBeforeTitle.push(child);\n        if (slotName === 'title') slotsTitle.push(child);\n        if (slotName === 'after-title') slotsAfterTitle.push(child);\n        if (slotName === 'subtitle') slotsSubtitle.push(child);\n        if (slotName === 'text') slotsText.push(child);\n        if (slotName === 'header') slotsHeader.push(child);\n        if (slotName === 'footer') slotsFooter.push(child);\n      });\n\n      if (radio || checkbox) {\n        {\n          inputEl = React.createElement('input', {\n            ref: function ref(__reactNode) {\n              _this2.__reactRefs['inputEl'] = __reactNode;\n            },\n            value: value,\n            name: name,\n            checked: checked,\n            defaultChecked: defaultChecked,\n            readOnly: readonly,\n            disabled: disabled,\n            required: required,\n            type: radio ? 'radio' : 'checkbox',\n            onChange: this.onChange\n          });\n        }\n        inputIconEl = React.createElement('i', {\n          className: \"icon icon-\".concat(radio ? 'radio' : 'checkbox')\n        });\n      }\n\n      if (media || slotsMedia.length) {\n        var mediaImgEl;\n\n        if (media) {\n          mediaImgEl = React.createElement('img', {\n            src: media\n          });\n        }\n\n        mediaEl = React.createElement('div', {\n          className: 'item-media'\n        }, mediaImgEl, slotsMedia);\n      }\n\n      var isMedia = mediaItem || mediaList;\n\n      if (header || slotsHeader.length) {\n        headerEl = React.createElement('div', {\n          className: 'item-header'\n        }, header, slotsHeader);\n      }\n\n      if (footer || slotsFooter.length) {\n        footerEl = React.createElement('div', {\n          className: 'item-footer'\n        }, footer, slotsFooter);\n      }\n\n      if (title || slotsTitle.length || !isMedia && headerEl || !isMedia && footerEl) {\n        titleEl = React.createElement('div', {\n          className: 'item-title'\n        }, !isMedia && headerEl, title, slotsTitle, !isMedia && footerEl);\n      }\n\n      if (subtitle || slotsSubtitle.length) {\n        subtitleEl = React.createElement('div', {\n          className: 'item-subtitle'\n        }, subtitle, slotsSubtitle);\n      }\n\n      if (text || slotsText.length) {\n        textEl = React.createElement('div', {\n          className: 'item-text'\n        }, text, slotsText);\n      }\n\n      if (after || badge || slotsAfter.length) {\n        if (after) {\n          afterEl = React.createElement('span', null, after);\n        }\n\n        if (badge) {\n          badgeEl = React.createElement(F7Badge, {\n            color: badgeColor\n          }, badge);\n        }\n\n        afterWrapEl = React.createElement('div', {\n          className: 'item-after'\n        }, slotsAfterStart, afterEl, badgeEl, slotsAfter, slotsAfterEnd);\n      }\n\n      if (isMedia) {\n        titleRowEl = React.createElement('div', {\n          className: 'item-title-row'\n        }, slotsBeforeTitle, titleEl, slotsAfterTitle, afterWrapEl);\n        innerEl = React.createElement('div', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['innerEl'] = __reactNode;\n          },\n          className: 'item-inner'\n        }, slotsInnerStart, headerEl, titleRowEl, subtitleEl, textEl, slotsInner, footerEl, slotsInnerEnd);\n      } else {\n        innerEl = React.createElement('div', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['innerEl'] = __reactNode;\n          },\n          className: 'item-inner'\n        }, slotsInnerStart, slotsBeforeTitle, titleEl, slotsAfterTitle, afterWrapEl, slotsInner, slotsInnerEnd);\n      }\n\n      var ItemContentTag = checkbox || radio ? 'label' : 'div';\n      var classes = Utils.classNames(className, 'item-content', {\n        'item-checkbox': checkbox,\n        'item-radio': radio,\n        'item-input': hasInput,\n        'inline-label': hasInlineLabel,\n        'item-input-with-info': hasInputInfo,\n        'item-input-with-error-message': hasInputErrorMessage,\n        'item-input-invalid': hasInputInvalid,\n        'item-input-with-value': hasInputValue,\n        'item-input-focused': hasInputFocused\n      }, Mixins.colorClasses(props));\n      return React.createElement(ItemContentTag, {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, slotsContentStart, inputEl, inputIconEl, mediaEl, innerEl, slotsContent, slotsContentEnd);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      el.removeEventListener('click', self.onClick);\n      el.removeEventListener('input:empty', self.onEmpty);\n      el.removeEventListener('input:notempty', self.onNotEmpty);\n      el.removeEventListener('focus', self.onFocus, true);\n      el.removeEventListener('blur', self.onBlur, true);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      var innerEl = self.refs.innerEl;\n      if (!innerEl) return;\n      var $innerEl = self.$$(innerEl);\n      var $labelEl = $innerEl.children('.item-title.item-label');\n      var $inputWrapEl = $innerEl.children('.item-input-wrap');\n      var hasInlineLabel = $labelEl.hasClass('item-label-inline');\n      var hasInput = $inputWrapEl.length > 0;\n      var hasInputInfo = $inputWrapEl.children('.item-input-info').length > 0;\n      var hasInputErrorMessage = $inputWrapEl.children('.item-input-error-message').length > 0;\n      var hasInputInvalid = $inputWrapEl.children('.input-invalid').length > 0;\n\n      if (hasInlineLabel !== self.state.hasInlineLabel) {\n        self.setState({\n          hasInlineLabel: hasInlineLabel\n        });\n      }\n\n      if (hasInput !== self.state.hasInput) {\n        self.setState({\n          hasInput: hasInput\n        });\n      }\n\n      if (hasInputInfo !== self.state.hasInputInfo) {\n        self.setState({\n          hasInputInfo: hasInputInfo\n        });\n      }\n\n      if (!self.hasInputErrorMessageSet && hasInputErrorMessage !== self.state.hasInputErrorMessage) {\n        self.setState({\n          hasInputErrorMessage: hasInputErrorMessage\n        });\n      }\n\n      if (hasInputInvalid !== self.state.hasInputInvalid) {\n        self.setState({\n          hasInputInvalid: hasInputInvalid\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var _self$refs = self.refs,\n          innerEl = _self$refs.innerEl,\n          el = _self$refs.el,\n          inputEl = _self$refs.inputEl;\n      el.addEventListener('click', self.onClick);\n      if (!innerEl) return;\n      var $innerEl = self.$$(innerEl);\n      var $labelEl = $innerEl.children('.item-title.item-label');\n      var $inputWrapEl = $innerEl.children('.item-input-wrap');\n      var hasInlineLabel = $labelEl.hasClass('item-label-inline');\n      var hasInput = $inputWrapEl.length > 0;\n      var hasInputInfo = $inputWrapEl.children('.item-input-info').length > 0;\n      var hasInputErrorMessage = $inputWrapEl.children('.item-input-error-message').length > 0;\n      var hasInputInvalid = $inputWrapEl.children('.input-invalid').length > 0;\n\n      if (hasInput) {\n        el.addEventListener('focus', self.onFocus, true);\n        el.addEventListener('blur', self.onBlur, true);\n        el.addEventListener('input:empty', self.onEmpty);\n        el.addEventListener('input:notempty', self.onNotEmpty);\n      }\n\n      if (!self.hasInlineLabelSet && hasInlineLabel !== self.state.hasInlineLabel) {\n        self.setState({\n          hasInlineLabel: hasInlineLabel\n        });\n      }\n\n      if (!self.hasInputSet && hasInput !== self.state.hasInput) {\n        self.setState({\n          hasInput: hasInput\n        });\n      }\n\n      if (!self.hasInputInfoSet && hasInputInfo !== self.state.hasInputInfo) {\n        self.setState({\n          hasInputInfo: hasInputInfo\n        });\n      }\n\n      if (!self.hasInputErrorMessageSet && hasInputErrorMessage !== self.state.hasInputErrorMessage) {\n        self.setState({\n          hasInputErrorMessage: hasInputErrorMessage\n        });\n      }\n\n      if (!self.hasInputInvalidSet && hasInputInvalid !== self.state.hasInputInvalid) {\n        self.setState({\n          hasInputInvalid: hasInputInvalid\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      this.checkHasInputState();\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.checkHasInputState();\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7ListItemContent;\n}(React.Component);\n\n__reactComponentSetProps(F7ListItemContent, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  title: [String, Number],\n  text: [String, Number],\n  media: String,\n  subtitle: [String, Number],\n  header: [String, Number],\n  footer: [String, Number],\n  after: [String, Number],\n  badge: [String, Number],\n  badgeColor: String,\n  mediaList: Boolean,\n  mediaItem: Boolean,\n  itemInput: Boolean,\n  itemInputWithInfo: Boolean,\n  inlineLabel: Boolean,\n  checkbox: Boolean,\n  checked: Boolean,\n  defaultChecked: Boolean,\n  radio: Boolean,\n  name: String,\n  value: [String, Number, Array],\n  readonly: Boolean,\n  required: Boolean,\n  disabled: Boolean\n}, Mixins.colorProps));\n\nF7ListItemContent.displayName = 'f7-list-item-content';\nexport default F7ListItemContent;","map":null,"metadata":{},"sourceType":"module"}