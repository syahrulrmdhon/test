{"ast":null,"code":"import _classCallCheck from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/user/Documents/On Progress/gredu-v2-fe/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport events from '../utils/events';\nimport f7 from '../utils/f7';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Tab =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Tab, _React$Component);\n\n  function F7Tab(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Tab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Tab).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        tabContent: null\n      };\n    }();\n\n    (function () {\n      _this.onTabShowBound = _this.onTabShow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n      _this.onTabHideBound = _this.onTabHide.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Tab, [{\n    key: \"show\",\n    value: function show(animate) {\n      if (!this.$f7) return;\n      this.$f7.tab.show(this.refs.el, animate);\n    }\n  }, {\n    key: \"onTabShow\",\n    value: function onTabShow(event) {\n      this.dispatchEvent('tab:show tabShow', event);\n    }\n  }, {\n    key: \"onTabHide\",\n    value: function onTabHide(event) {\n      this.dispatchEvent('tab:hide tabHide', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var tabActive = props.tabActive,\n          id = props.id,\n          className = props.className,\n          style = props.style;\n      var tabContent = self.state.tabContent;\n      var classes = Utils.classNames(className, 'tab', {\n        'tab-active': tabActive\n      }, Mixins.colorClasses(props));\n      var TabContent;\n      if (tabContent) TabContent = tabContent.component;\n      {\n        return React.createElement('div', {\n          id: id,\n          style: style,\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['el'] = __reactNode;\n          },\n          className: classes\n        }, tabContent ? React.createElement(TabContent, Object.assign({\n          key: tabContent.id\n        }, tabContent.props)) : this.slots['default']);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n\n      if (el) {\n        el.addEventListener('tab:show', self.onTabShowBound);\n        el.addEventListener('tab:hide', self.onTabHideBound);\n      }\n\n      self.setState({\n        tabContent: null\n      });\n      self.$f7ready(function () {\n        self.routerData = {\n          el: el,\n          component: self\n        };\n        f7.routers.tabs.push(self.routerData);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n\n      if (el) {\n        el.removeEventListener('tab:show', self.onTabShowBound);\n        el.removeEventListener('tab:hide', self.onTabHideBound);\n      }\n\n      if (!self.routerData) return;\n      f7.routers.tabs.splice(f7.routers.tabs.indexOf(self.routerData), 1);\n      self.routerData = null;\n      delete self.routerData;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      if (!self.routerData) return;\n      events.emit('tabRouterDidUpdate', self.routerData);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Tab;\n}(React.Component);\n\n__reactComponentSetProps(F7Tab, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  tabActive: Boolean\n}, Mixins.colorProps));\n\nF7Tab.displayName = 'f7-tab';\nexport default F7Tab;","map":null,"metadata":{},"sourceType":"module"}